load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_keys then 
Tasksync._initialized_tasksync_with_keys = true 
	do 
    local RegisterKeyActionCallback = function(KEY_ACTION_NAME,cb) 
        
    end 
	local RegisterKeyFull = function(KEY,KEY_ACTION_NAME,description,presseddelay,delayperpressed,MAPPER,cb) 
		local type_ = type_ or 'keyboard'
        local thisduration
       
        
		RegisterCommand("+"..KEY_ACTION_NAME, function() 
            if cb then cb("JUST_PRESSED") end 
			if presseddelay ~= -1 then 
                local delaytime = GetGameTimer() + (presseddelay or 500)
                local loopduration = delayperpressed
                
                if delayperpressed == -1 then loopduration = 150 end 
                Tasksync.addlooponce("KEY_LOOP:"..KEY_ACTION_NAME,loopduration or 300,function(duration)
                    
                    thisduration = duration 
                    if GetGameTimer() > delaytime then 
                        if delayperpressed == - 1 then 
                            if cb then cb("JUST_HOLDED") end 
                            Tasksync.deletelooponce("KEY_LOOP:"..KEY_ACTION_NAME)
                            
                        else 
                            if cb then cb("PRESSED") end 
                        end 
                    end 
                end, function()
                    if cb then cb("JUST_RELEASED") end 
                end)
            end 
		end, false) 
		RegisterCommand("-"..KEY_ACTION_NAME, function() 
            if presseddelay == -1 then
                if cb then cb("JUST_RELEASED") end 
            end 
            Tasksync.deletelooponce("KEY_LOOP:"..KEY_ACTION_NAME)
		end, false) 
		RegisterKeyMapping("+"..KEY_ACTION_NAME, description or KEY_ACTION_NAME , MAPPER, KEY) 
	end 
    local KEYS_CBS = {}
	local _RegisterKeyNormal = function(KEY,KEY_ACTION_NAME,description,MAPPER,cb,duration1,duration2) 
        local isNewKey = false 
        if not KEYS_CBS[KEY] then 
            KEYS_CBS[KEY] = {} 
            isNewKey = true 
        end 
        table.insert(KEYS_CBS[KEY],cb)
        cb = function(...)
            for i,v in pairs(KEYS_CBS[KEY]) do 
                v(...)
            end 
        end 
        
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,duration1,duration2,MAPPER,cb)
	end 
    local _RegisterKeyPress = function(KEY,KEY_ACTION_NAME,description,MAPPER,cb,duration1,duration2) 
        local isNewKey = false 
        if not KEYS_CBS[KEY] then 
            KEYS_CBS[KEY] = {} 
            isNewKey = true 
        end 
        table.insert(KEYS_CBS[KEY],cb)
        cb = function(...)
            for i,v in pairs(KEYS_CBS[KEY]) do 
                v(...)
            end 
        end 
        
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,duration1,duration2,MAPPER,cb)
	end 
    local _RegisterKeyHold = function(KEY,KEY_ACTION_NAME,description,MAPPER,cb,duration1,duration2) 
        local isNewKey = false 
        if not KEYS_CBS[KEY] then 
            KEYS_CBS[KEY] = {} 
            isNewKey = true 
        end 
        table.insert(KEYS_CBS[KEY],cb)
        cb = function(...)
            for i,v in pairs(KEYS_CBS[KEY]) do 
                v(...)
            end 
        end 
        
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,duration1,duration2,MAPPER,cb)
	end 
    RegisterKeyNormal = function(key,cb,mapper)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..key
        local mapper = mapper or "keyboard"
        return _RegisterKeyNormal(key,keyaction,key,mapper,cb, -1, -1) 
    end 
    RegisterKeyPress = function(key,cb,mapper, duration1, duration2)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..key
        local mapper = mapper or "keyboard"
        return _RegisterKeyPress(key,keyaction,key,mapper,cb , duration1 or 500, duration2 or 150) 
    end 
    RegisterKeyHold = function(key,cb,mapper, duration)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..key
        local mapper = mapper or "keyboard"
        return _RegisterKeyHold(key,keyaction,key,mapper,cb, duration or 500, -1) 
    end 
    local RegisteredKeyCallbacks = {} 

    local tasks ={}
    local e = {} ; setmetatable(e,{__call = function(self) return end})
    local RegisterEntrys = {}
    local Containers = {} 
    local RegisterEntry = function(group,onjustpressed,onpressed,onjustholded,onjustreleased)
        RegisterEntrys[group] = {
            onjustpressed = onjustpressed,
            onpressed = onpressed,
            onjustholded = onjustholded,
            onjustreleased = onjustreleased
        }
    end
   
                    
    local CheckCallbacks = function(container)
        
        local group = container.group 
        local namespace = container.namespace 
        local keys = container.data.keys 
        local cbs = container.data.cbs 
        
        local iskeycanberegisteredthismoment = function(key)
            for i,v in pairs(keys) do
                if v[1] == key then 
                    return v[1],(v[2] or 'keyboard')
                end 
            end 
            return  
        end 
        local getdurationofcbtype = function(cbtype)
            if cbtype == "JUST_PRESSED" then 
                return -1,-1
            elseif cbtype == "PRESSED" then 
                return 500,150
            elseif cbtype == "JUST_HOLDED" then 
                return 500,-1
            end 
        end 
        
        for i,v in pairs(cbs) do
            
            local key, mapper = iskeycanberegisteredthismoment(v[1])
            
            if key then 
                local inputkey = key
                local cbtype = v[2]
                local cb = v[3] 
                local outputlinked = (v[4] or inputkey):lower()
                local durationa, durationb = getdurationofcbtype(cbtype)
                local duration1, duration2 = v[5] or durationa, v[6] or durationb
                local isNew = false 
                if not RegisteredKeyCallbacks[group] then isNew = true; RegisteredKeyCallbacks[group] = {} end 
                if not RegisteredKeyCallbacks[group][namespace] then isNew = true; RegisteredKeyCallbacks[group][namespace] = {} end 
                if not RegisteredKeyCallbacks[group][namespace][mapper] then isNew = true; RegisteredKeyCallbacks[group][namespace][mapper] = {} end 
                if not RegisteredKeyCallbacks[group][namespace][mapper][key] then isNew = true; RegisteredKeyCallbacks[group][namespace][mapper][key] = {
                    ["JUST_PRESSED"] = nil,
                    ["PRESSED"] = nil,
                    ["JUST_HOLDED"] = nil,
                    ["JUST_RELEASED"] = nil,
                } end 
                if not RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype] then isNew = true 
                
                RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype] = {
                    cb = function(outputcbtype) 
                        if container.active and outputcbtype == cbtype then 
                            local actions = {} 
                            actions["JUST_PRESSED"] = RegisterEntrys[group].onjustpressed
                            actions["PRESSED"] = RegisterEntrys[group].onpressed
                            actions["JUST_HOLDED"] = RegisterEntrys[group].onjustholded
                            actions["JUST_RELEASED"] = RegisterEntrys[group].onjustreleased
                            if actions[outputcbtype] then 
                                actions[outputcbtype](namespace,inputkey,outputcbtype,outputlinked)
                            end 
                            cb(inputkey,outputcbtype,outputlinked,namespace) 
                            
                        end 
                    end ,
                    duration1 = duration1,
                    duration2 = duration2 
                }

                else error ("callback existed",2)
                end
                if isNew then 
                    
                    if cbtype == "PRESSED" then  
                        RegisterKeyPress(key,RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype].cb ,mapper, duration1, duration2)
                    elseif cbtype == "JUST_HOLDED" then 
                    
                        RegisterKeyHold(key,RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype].cb,mapper, duration1)
                    elseif cbtype == "JUST_PRESSED" or cbtype == "JUST_RELEASED" then 
                    
                        RegisterKeyNormal(key,RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype].cb,mapper)
                    end 
                end 
            end 
        end 
    end 
    
    
    local GetCreated = function(group, namespace) 
        for i=1, #Containers do 
            local t = Containers[i]
            if t.group == group and t.namespace == namespace then 
                return t 
            end 
        end 
    end 
    local GetCreatedData = function(group, namespace) 
        local t = GetCreated(group, namespace) 
        return t.data
	end 
    local Create = function(group, namespace, data)
        local container = {}
        local origin_container = GetCreated(group, namespace) 
        if origin_container == nil  then 
            table.insert(Containers, container)
        else 
            container = origin_container
        end 
        container.group = group 
        container.namespace = namespace 
        container.data = data 
        container.data._namespace = namespace 
        container.active = false 
        CheckCallbacks(container)
        
        return container
    end 
    local SetGroupNamespaceActive = function(group,namespace,active)
        local container = GetCreated(group,namespace)
        container.active = active
    end 
    local GetGroupNamespaceActive = function(group,namespace)
        local container = GetCreated(group,namespace)
        return container.active
    end 
    Tasksync.KeyContainer = {}
    Tasksync.KeyContainer.RegisterEntry = RegisterEntry
    Tasksync.KeyContainer.Create = Create
    Tasksync.KeyContainer.RegisterEntry("test")
    Tasksync.KeyContainer.SetGroupNamespaceActive = SetGroupNamespaceActive
    Tasksync.KeyContainer.GetGroupNamespaceActive = GetGroupNamespaceActive
    
    end 
end 