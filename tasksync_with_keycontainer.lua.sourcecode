load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_keys then 
Tasksync._initialized_tasksync_with_keys = true 
	local e = {} ; setmetatable(e,{__call = function(self) return end})
    do 
	local RegisterKeyFull = function(KEY,KEY_ACTION_NAME,description,MAPPER,cbdata) 
		local type_ = type_ or 'keyboard'
        local thisduration

        if type(KEY) == 'table' then 
            local combinedkeys = KEY
            local combined = {"NULL","NULL"}
            local canhold = true 
            local KEY_ACTION_NAME2 = KEY_ACTION_NAME .. (table.concat(combinedkeys)) 
            local getduration = function()
                local duration1,duration2 = -1, -1
                for i,v in pairs(cbdata) do 
                    if v.duration1 ~= -1 then 
                        duration1 = v.duration1
                    end 
                    if v.duration2 ~= -1 then 
                        duration2 = v.duration2
                    end 
                end 
                return duration1,duration2 
            end 
            local presseddelay,delayperpressed = getduration()
            if presseddelay ~= -1 then 
                for i,C_KEY in pairs(combinedkeys) do 
                    local KEY_ACTION_NAME = KEY_ACTION_NAME .. C_KEY 
                    RegisterCommand("+"..KEY_ACTION_NAME, function() 
                        if not (table.concat(combined) == table.concat(combinedkeys)) then 
                            combined[i] = C_KEY
                        end 
                        if table.concat(combined) == table.concat(combinedkeys) then
                            if (cbdata["JUST_PRESSED"] or e).cb then 
                                cbdata["JUST_PRESSED"].cb("JUST_PRESSED")
                            end 
                            local delaytime = GetGameTimer() + 500
                            local loopduration = tonumber(delayperpressed)
                    
                            if delayperpressed == -1 then loopduration = 150 end 
                            Tasksync.addlooponce("KEY_LOOP:"..KEY_ACTION_NAME2,loopduration or 300,function(duration)
                                
                                if table.concat(combined) == table.concat(combinedkeys) then 
                                    if GetGameTimer() > delaytime and canhold then 
                                        if delayperpressed == - 1 then 
                                            if (cbdata["JUST_HOLDED"] or e).cb then 
                                                cbdata["JUST_HOLDED"].cb("JUST_HOLDED")
                                            end 
                                            canhold = false 
                                        else 
                                            if (cbdata["PRESSED"] or e).cb then 
                                                cbdata["PRESSED"].cb("PRESSED")
                                            end 
                                        end 
                                    end 
                                    
                                else 
                                    Tasksync.deletelooponce("KEY_LOOP:"..KEY_ACTION_NAME2)
                                end 
                            end, function()
                                if (cbdata["JUST_RELEASED"] or e).cb then 
                                    cbdata["JUST_RELEASED"].cb("JUST_RELEASED")
                                end 
                                canhold = true 
                            end )
                        end 
                    end, false) 
                    RegisterCommand("-"..KEY_ACTION_NAME, function() 
                        
                        combined[i] = "NULL"
                        
                        --if thisduration then thisduration("break") print('break') end 
                    end, false) 
                    RegisterKeyMapping("+"..KEY_ACTION_NAME, description or KEY_ACTION_NAME , MAPPER, C_KEY) 
                end 
            end 
        else 
            local getduration = function()
                local duration1,duration2 = -1, -1
                for i,v in pairs(cbdata) do 
                    if v.duration1 ~= -1 then 
                        duration1 = v.duration1
                    end 
                    if v.duration2 ~= -1 then 
                        duration2 = v.duration2
                    end 
                end 
                return duration1,duration2 
            end 
            local presseddelay,delayperpressed = getduration()
            RegisterCommand("+"..KEY_ACTION_NAME, function() 
                if (cbdata["JUST_PRESSED"] or e).cb then 
                    cbdata["JUST_PRESSED"].cb("JUST_PRESSED")
                end 
                
                if presseddelay ~= -1 then 
                    local delaytime = GetGameTimer() + (presseddelay or 500)
                    
                    local loopduration = tonumber(delayperpressed)
                    
                    if delayperpressed == -1 then loopduration = 150 end 
                    
                    --thisduration = Tasksync.looponcenewthread("KEY_LOOP:"..KEY_ACTION_NAME,loopduration or 300,function(duration)
                    Tasksync.addlooponce("KEY_LOOP:"..KEY_ACTION_NAME,loopduration or 300,function(duration)
                         
                        if GetGameTimer() > delaytime then 

                            if delayperpressed == - 1 then 
                                
                                if (cbdata["JUST_HOLDED"] or e).cb then 
                                    cbdata["JUST_HOLDED"].cb("JUST_HOLDED")
                                end 
                                Tasksync.deletelooponce("KEY_LOOP:"..KEY_ACTION_NAME)
                                --if thisduration then  thisduration("break") end 
                            else 
                                
                                if (cbdata["PRESSED"] or e).cb then 
                                    cbdata["PRESSED"].cb("PRESSED")
                                end 
                            end 
                        end 
                    end, function()
                        if (cbdata["JUST_RELEASED"] or e).cb then 
                            cbdata["JUST_RELEASED"].cb("JUST_RELEASED")
                        end 
                    end)
                end 
            end, false) 
            RegisterCommand("-"..KEY_ACTION_NAME, function() 
                if presseddelay == -1 then
                    if (cbdata["JUST_RELEASED"] or e).cb then 
                        cbdata["JUST_RELEASED"].cb("JUST_RELEASED")
                    end 
                end 
                Tasksync.deletelooponce("KEY_LOOP:"..KEY_ACTION_NAME)
                --if thisduration then thisduration("break") print('break') end 
            end, false) 
            RegisterKeyMapping("+"..KEY_ACTION_NAME, description or KEY_ACTION_NAME , MAPPER, KEY) 
        end 
	end 
	local _RegisterKeyNormal = function(KEY,KEY_ACTION_NAME,description,MAPPER, cbdata) 
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,MAPPER,cbdata)
	end 
    local _RegisterKeyPress = function(KEY,KEY_ACTION_NAME,description,MAPPER,cbdata) 
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,MAPPER,cbdata)
	end 
    local _RegisterKeyHold = function(KEY,KEY_ACTION_NAME,description,MAPPER,cbdata) 
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,MAPPER,cbdata)
	end 
    RegisterKeyNormal = function(key,mapper, cbdata)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..(type(key) == 'table' and table.concat(key) or key)
        local mapper = mapper or "keyboard"
        return _RegisterKeyNormal(key,keyaction,key,mapper, cbdata) 
    end 
    RegisterKeyPress = function(key,mapper, cbdata)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..(type(key) == 'table' and table.concat(key) or key)
        local mapper = mapper or "keyboard"
        return _RegisterKeyPress(key,keyaction,key,mapper , cbdata) 
    end 
    RegisterKeyHold = function(key,mapper, cbdata)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..(type(key) == 'table' and table.concat(key) or key)
        local mapper = mapper or "keyboard"
        return _RegisterKeyHold(key,keyaction,key,mapper, cbdata) 
    end 
    local RegisteredKeyCallbacks = {} 

    local tasks ={}
    
    local RegisterEntrys = {}
    local Containers = {} 
    local RegisterEntry = function(group,onjustpressed,onpressed,onjustholded,onjustreleased)
        RegisterEntrys[group] = {
            onjustpressed = onjustpressed,
            onpressed = onpressed,
            onjustholded = onjustholded,
            onjustreleased = onjustreleased
        }
    end
   
                    
    local CheckCallbacks = function(container)
        
        local group = container.group 
        local namespace = container.namespace 
        local keys = container.data.keys 
        local cbs = container.data.cbs 
        local equal = function(a,b)
            if type(a) == 'table' and type(b) == 'table' then 
                return table.concat(a) == table.concat(b)
            else 
                return a == b 
            end 
        end 
        local iskeycanberegisteredthismoment = function(key)
            for i,v in pairs(keys) do
                if equal(v[1],key) then 
                    return v[1],(v[2] or 'keyboard')
                end 
            end 
            return  
        end 
        local getdurationofcbtype = function(cbtype)
            if cbtype == "JUST_PRESSED" or cbtype == "JUST_RELEASED" then 
                return -1,-1
            elseif cbtype == "PRESSED" then 
                return 500,150
            elseif cbtype == "JUST_HOLDED" then 
                return 500,-1
            end 
            return error("wtf",2)
        end 
        
        for i,v in pairs(cbs) do
            
            local key, mapper = iskeycanberegisteredthismoment(v[1])
            
            if key then 
                local inputkey = key
                
                local cbtype = v[2]
                local _cb = v[3] 
                local outputlinked = (v[4] or inputkey):lower()
                local durationa, durationb = getdurationofcbtype(cbtype)
                local duration1, duration2 = v[5] or durationa, v[6] or durationb
                local isNew = false 
                if not RegisteredKeyCallbacks[group] then isNew = true; RegisteredKeyCallbacks[group] = {} end 
                if not RegisteredKeyCallbacks[group][namespace] then isNew = true; RegisteredKeyCallbacks[group][namespace] = {} end 
                if not RegisteredKeyCallbacks[group][namespace][mapper] then isNew = true; RegisteredKeyCallbacks[group][namespace][mapper] = {} end 
                if not RegisteredKeyCallbacks[group][namespace][mapper][key] then isNew = true; RegisteredKeyCallbacks[group][namespace][mapper][key] = {
                    ["JUST_PRESSED"] = nil,
                    ["PRESSED"] = nil,
                    ["JUST_HOLDED"] = nil,
                    ["JUST_RELEASED"] = nil,
                } end 
                if not RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype] then isNew = true 
                
                RegisteredKeyCallbacks[group][namespace][mapper][key][cbtype] = {
                    cb = function(outputcbtype) 
                        if container.active and outputcbtype == cbtype then 
                            local actions = {} 
                            actions["JUST_PRESSED"] = RegisterEntrys[group].onjustpressed
                            actions["PRESSED"] = RegisterEntrys[group].onpressed
                            actions["JUST_HOLDED"] = RegisterEntrys[group].onjustholded
                            actions["JUST_RELEASED"] = RegisterEntrys[group].onjustreleased
                            if actions[outputcbtype] then 
                                actions[outputcbtype](namespace,inputkey,outputcbtype,outputlinked)
                            end 
                            _cb(inputkey,outputcbtype,outputlinked,namespace) 
                            
                        end 
                    end ,
                    duration1 = duration1,
                    duration2 = duration2 
                }

                else error ("callback existed",2)
                end
                if isNew then 
                    local k = RegisteredKeyCallbacks[group][namespace][mapper][key]
                    if cbtype == "PRESSED" then  
                        RegisterKeyPress(key,mapper,k)
                    elseif cbtype == "JUST_HOLDED" then 
                        
                        RegisterKeyHold(key,mapper,k)
                    elseif cbtype == "JUST_PRESSED" or cbtype == "JUST_RELEASED" then 
                    
                        RegisterKeyNormal(key,mapper,k)
                    end 
                end 
            end 
        end 
    end 
    
    
    local GetCreated = function(group, namespace) 
        for i=1, #Containers do 
            local t = Containers[i]
            if t.group == group and t.namespace == namespace then 
                return t 
            end 
        end 
    end 
    local GetCreatedData = function(group, namespace) 
        local t = GetCreated(group, namespace) 
        return t.data
	end 
    local Create = function(group, namespace, data)
        local container = {}
        local origin_container = GetCreated(group, namespace) 
        if origin_container == nil  then 
            table.insert(Containers, container)
        else 
            container = origin_container
        end 
        container.group = group 
        container.namespace = namespace 
        container.data = data 
        container.data._namespace = namespace 
        container.active = false 
        CheckCallbacks(container)
        
        return container
    end 
    local SetGroupNamespaceActive = function(group,namespace,active)
        local container = GetCreated(group,namespace)
        container.active = active
    end 
    local GetGroupNamespaceActive = function(group,namespace)
        local container = GetCreated(group,namespace)
        return container.active
    end 
    Tasksync.KeyContainer = {}
    Tasksync.KeyContainer.RegisterEntry = RegisterEntry
    Tasksync.KeyContainer.Create = Create
    Tasksync.KeyContainer.RegisterEntry("test")
    Tasksync.KeyContainer.SetGroupNamespaceActive = SetGroupNamespaceActive
    Tasksync.KeyContainer.GetGroupNamespaceActive = GetGroupNamespaceActive
    
    end 
end 