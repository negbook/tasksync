load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_keys then 
Tasksync._initialized_tasksync_with_keys = true 
	local e = {} ; setmetatable(e,{__call = function(self) return end})
    table.equal = function(a,b) return table.concat(a) == table.concat(b) end 
    json.tableequal = function(a,b) return json.encode(a) == json.encode(b) end 
    local autoequal = function(a,b)if type(a) == 'table' and type(b) == 'table' then return table.equal(a,b) else return a == b end end 
    local namespaces = {}
    local RegisteredKeyCallbacks = {} 
    local RegisterEntrys = {}
    local Containers = {} 
    
    do 
	local RegisterKeyFull = function(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey) 
		local type_ = type_ or 'keyboard'
        local thisduration
        local full = {} 
        local getcbs = function(key,mapper,cbtype,fn)
            local t = (((RegisteredKeyCallbacks or e)[key] or e)[mapper] or e)[cbtype]
            if t then 
                for group,namespaces in pairs(t) do 
                    for namespace,cbs in pairs(namespaces) do 
                       fn(group,namespace,cbs.cb,cbs.duration1 or 500,cbs.duration2 or 250)
                    end 
                end 
            end 
        end 
        local OnPress = function(key,mapper)
            getcbs(key,mapper,"JUST_PRESSED",function(group,namespace,cb)
                 cb("JUST_PRESSED",group,namespace);
            end)
            getcbs(key,mapper,"JUST_HOLDED",function(group,namespace,cb,duration1,duration2)
                 local delaytime = GetGameTimer() + duration1 
                 Tasksync.addlooponce("KEY_LOOP:"..group..namespace.."JUST_HOLDED" ,duration2 ,function(duration)
                      if GetGameTimer() > delaytime then 
                          cb("JUST_HOLDED",group,namespace);
                          Tasksync.deletelooponce("KEY_LOOP:"..group..namespace.."JUST_HOLDED" )
                      end 
                 end)
            end)
            getcbs(key,mapper,"PRESSED",function(group,namespace,cb,duration1,duration2)
                 local delaytime = GetGameTimer() + duration1 
                 Tasksync.addlooponce("KEY_LOOP:"..group..namespace.."PRESSED" ,duration2 ,function(duration)
                     if GetGameTimer() > delaytime then 
                         cb("PRESSED",group,namespace);
                         --Tasksync.deletelooponce("KEY_LOOP:"..group..namespace.."PRESSED" )
                     end 
                 end,function()
                     cb("JUST_RELEASED",group,namespace);
                 end)
            end)  
        end 
        local OnRelease = function(key,mapper)
            getcbs(key,mapper,"JUST_RELEASED",function(group,namespace,cb)
                 cb("JUST_RELEASED",group,namespace);
            end)
            getcbs(key,mapper,"PRESSED",function(group,namespace,cb)
                 Tasksync.deletelooponce("KEY_LOOP:"..group..namespace.."PRESSED" )
            end)
            getcbs(key,mapper,"JUST_HOLDED",function(group,namespace,cb)
                 Tasksync.deletelooponce("KEY_LOOP:"..group..namespace.."JUST_HOLDED" )
            end)
        end 
        if istablekey then 
            local combinedkeys = json.decode(KEY)
            local combined = {}
            for i,v in pairs(combinedkeys) do combined[i] = "NULL" end 
            for i,C_KEY in pairs(combinedkeys) do 
                local KEY_ACTION_NAME = KEY_ACTION_NAME .. C_KEY 
                local _OnPress = function()
                    if not full[KEY] then 
                        if not (json.tableequal(combined,combinedkeys)) then 
                            combined[i] = C_KEY
                        end 
                        if (json.tableequal(combined,combinedkeys)) then
                            OnPress(KEY,MAPPER)
                            full[KEY] = true 
                        end 
                    end 
                end 
                local _OnRelease = function() 
                    combined[i] = "NULL"
                    if not (json.tableequal(combined,combinedkeys)) and full[KEY] then 
                        OnRelease(KEY,MAPPER)
                        full[KEY] = false 
                    end 
                end 
                RegisterCommand("+"..KEY_ACTION_NAME, _OnPress , false) 
                RegisterCommand("-"..KEY_ACTION_NAME, _OnRelease, false) 
                RegisterKeyMapping("+"..KEY_ACTION_NAME, description or KEY_ACTION_NAME , MAPPER, C_KEY) 
            end 
        else 
            RegisterCommand("+"..KEY_ACTION_NAME, function() OnPress(KEY,MAPPER) end , false) 
            RegisterCommand("-"..KEY_ACTION_NAME, function() OnRelease(KEY,MAPPER) end, false) 
            RegisterKeyMapping("+"..KEY_ACTION_NAME, description or KEY_ACTION_NAME , MAPPER, KEY) 
        end 
       
	end 
	local _RegisterKeyNormal = function(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey) 
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey)
	end 
    local _RegisterKeyPress = function(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey) 
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey)
	end 
    local _RegisterKeyHold = function(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey) 
        return RegisterKeyFull(KEY,KEY_ACTION_NAME,description,MAPPER,istablekey)
	end 
    RegisterKeyNormal = function(key,mapper,istablekey)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..(istablekey and table.concat(json.decode(key)) or key)
        local mapper = mapper or "keyboard"
        return _RegisterKeyNormal(key,keyaction,key,mapper,istablekey) 
    end 
    RegisterKeyPress = function(key,mapper,istablekey)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..(istablekey and table.concat(json.decode(key)) or key)
        local mapper = mapper or "keyboard"
        return _RegisterKeyPress(key,keyaction,key,mapper ,istablekey) 
    end 
    RegisterKeyHold = function(key,mapper,istablekey)
        local keyaction = "Keycontainer_"..GetCurrentResourceName()..(istablekey and table.concat(json.decode(key)) or key)
        local mapper = mapper or "keyboard"
        return _RegisterKeyHold(key,keyaction,key,mapper,istablekey) 
    end 
    
    local RegisterEntry = function(group,onjustpressed,onpressed,onjustholded,onjustreleased)
        RegisterEntrys[group] = {
            onjustpressed = onjustpressed,
            onpressed = onpressed,
            onjustholded = onjustholded,
            onjustreleased = onjustreleased
        }
    end
   
                    
    local CheckCallbacks = function(container)
        
        local group = container.group 
        local namespace = container.namespace 
        local keys = container.data.keys 
        local cbs = container.data.cbs 
        local iskeycanberegisteredthismoment = function(key)
            for i,v in pairs(keys) do
                if autoequal(v[1],key) then 
                    return v[1],(v[2] or 'keyboard')
                end 
            end 
            return  
        end 
        for i,v in pairs(cbs) do
            local key, mapper = iskeycanberegisteredthismoment(v[1])
            if key then 
                local inputkey = (type(key)=='table' and json.encode(key) or key)
                local istablekey = type(key)=='table'
                local cbtype = v[2]
                local _cb = v[3] 
                local outputlinked = (v[4] or (type(inputkey)=='table' and table.concat(inputkey) or inputkey) ):lower()
                local duration1, duration2 = v[5], v[6]
                local isNew = false 
                if not RegisteredKeyCallbacks[inputkey] then isNew = true; RegisteredKeyCallbacks[inputkey] = {} end 
                if not RegisteredKeyCallbacks[inputkey][mapper] then isNew = true; RegisteredKeyCallbacks[inputkey][mapper] = {} end 
                if not RegisteredKeyCallbacks[inputkey][mapper][cbtype] then isNew = true; RegisteredKeyCallbacks[inputkey][mapper][cbtype] = {} end 
                if not RegisteredKeyCallbacks[inputkey][mapper][cbtype][group] then isNew = true; RegisteredKeyCallbacks[inputkey][mapper][cbtype][group] = {} end 
                if not RegisteredKeyCallbacks[inputkey][mapper][cbtype][group][namespace] then isNew = true 
                
                RegisteredKeyCallbacks[inputkey][mapper][cbtype][group][namespace] = {
                    cb = function(outputcbtype,outputnamespace) 
                        if container.active and outputcbtype == cbtype then 
                            local actions = {} 
                            actions["JUST_PRESSED"] = RegisterEntrys[group].onjustpressed
                            actions["PRESSED"] = RegisterEntrys[group].onpressed
                            actions["JUST_HOLDED"] = RegisterEntrys[group].onjustholded
                            actions["JUST_RELEASED"] = RegisterEntrys[group].onjustreleased
                            if actions[outputcbtype] then 
                                actions[outputcbtype](namespace,inputkey,outputcbtype,outputlinked)
                            end 
                            _cb(inputkey,outputcbtype,outputlinked,namespace) 
                            
                        end 
                    end ,
                    duration1 = duration1,
                    duration2 = duration2 
                }

                else error ("callback existed",2)
                end
                if isNew then 
                    if cbtype == "PRESSED" then  
                        RegisterKeyPress(inputkey,mapper,istablekey)
                    elseif cbtype == "JUST_HOLDED" then 
                        
                        RegisterKeyHold(inputkey,mapper,istablekey)
                    elseif cbtype == "JUST_PRESSED" or cbtype == "JUST_RELEASED" then 
                    
                        RegisterKeyNormal(inputkey,mapper,istablekey)
                    end 
                end 
            end 
        end 
    end 
    
    
    local GetCreated = function(group, namespace) 
        for i=1, #Containers do 
            local t = Containers[i]
            if t.group == group and t.namespace == namespace then 
                return t 
            end 
        end 
    end 
    local GetCreatedData = function(group, namespace) 
        local t = GetCreated(group, namespace) 
        return t.data
	end 
    local Create = function(group, namespace, data)
        local container = {}
        local origin_container = GetCreated(group, namespace) 
        if origin_container == nil  then 
            table.insert(Containers, container)
        else 
            container = origin_container
        end 
        container.group = group 
        container.namespace = namespace 
        container.data = data 
        container.data._namespace = namespace 
        container.active = false 
        CheckCallbacks(container)
        
        return container
    end 
    local SetGroupNamespaceActive = function(group,namespace,active)
        local container = GetCreated(group,namespace)
        container.active = active
    end 
    local GetGroupNamespaceActive = function(group,namespace)
        local container = GetCreated(group,namespace)
        return container.active
    end 
    Tasksync.KeyContainer = {}
    Tasksync.KeyContainer.RegisterEntry = RegisterEntry
    Tasksync.KeyContainer.Create = Create
    Tasksync.KeyContainer.SetGroupNamespaceActive = SetGroupNamespaceActive
    Tasksync.KeyContainer.GetGroupNamespaceActive = GetGroupNamespaceActive
    
    end 
end 