if not Tasksync then 
	Tasksync = setmetatable({},{})
end 
if not Tasksync._initialized_tasksync then 
Tasksync._initialized_tasksync = true 
Tasksync._Jobs = {{},{},{}}
local DurationGroup = Tasksync._Jobs[1]
local TodosFn = Tasksync._Jobs[2]
local TodosEndFn = Tasksync._Jobs[3]
Tasksync._debug = false
local resourceName = GetCurrentResourceName()
local _getAmountsOfLoop = function()
		local nowTable = (DurationGroup)
		local total = 0 
		for i,v in pairs(nowTable) do 
			local n = #v
			total = total + n
		end
		return total 
end 
AddEventHandler("Tasksync:ShowDebug",function(resourcename)
	Tasksync._debug = not Tasksync._debug 
end)
Tasksync.__createDepartmentGarden = function(duration)
	CreateThread(function()
		local todos = TodosFn 
		local jobGroup = DurationGroup[duration] 
		local duration = tonumber(duration)
		local e = {}
		repeat 
			local loc_jobgroup = (jobGroup or e)
			local isAnyJob = loc_jobgroup[1]
			if isAnyJob then 
				local debugtext = {}
				for i=1,#loc_jobgroup do 
					local jobname = loc_jobgroup[i]
					local fn = jobname and todos[jobname]
					
					if fn then fn() end 
					
					if Tasksync._debug and jobname then 
						table.insert(debugtext,resourceName.." (loop) "..jobname.." "..duration)
					end
				end 
				if Tasksync._debug then 
					for i,v in pairs(debugtext) do 
						print(v)
					end 
					print("Normal Loop Total",_getAmountsOfLoopType())
					print("Spaming after 3 seconds") Wait(3000)
				end 
			end 
			Wait(duration)
		until not isAnyJob 

		return 
	end)
end 	

Tasksync.addloop = function(jobname,duration,fn_todo,fn_todoend,cannotreplace) --jobname,duration,function
	local jobnameexisted = false 
	if TodosFn[jobname] ~= nil then 
		if cannotreplace then error('Duplicated taskjob: '..jobname, 2) return end 
		print ('Replaced Duplicated taskjob: '..jobname) ; 
		jobnameexisted = true 
    end 
	TodosFn[jobname] = fn_todo  
	if fn_todoend then 
		TodosEndFn[jobname] = fn_todoend  
	end 
	if jobnameexisted then 
		for olddurationGroup,jobs in pairs(DurationGroup) do 
			for i=1,#jobs do 
				local v = jobs[i]
				if v == jobname then 
					local newduration = duration
					local oldduration = olddurationGroup
					if newduration ~= oldduration then 
						table.remove(DurationGroup[olddurationGroup],i)
					end 
				end 
			end 
		end 
	end 
	local duration = tostring(duration)
	if DurationGroup[duration] == nil then 
		DurationGroup[duration] = {}; 
		table.insert(DurationGroup[duration],jobname)
		Tasksync.__createDepartmentGarden(duration)
	else 
		table.insert(DurationGroup[duration],jobname)
	end 
end 

Tasksync.insertloop = Tasksync.addloop
Tasksync.deleteloop = function(jobname)
	for duration,v in pairs(DurationGroup) do 
		for i=1,#DurationGroup[duration] do 
			if DurationGroup[duration][i] == jobname then 
				if TodosEndFn[jobname]  then TodosEndFn[jobname] () end 
				TodosEndFn[jobname] = nil 
				TodosFn[jobname] = nil 
				table.remove(DurationGroup[duration],i)
				if #DurationGroup[duration] == 0 then 
					DurationGroup[duration] = nil
				end 
			end 
		end 
	end 
end 
end 