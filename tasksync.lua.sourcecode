
if not Tasksync then 
	Tasksync = setmetatable({},{})
end 
if not Tasksync._tasksync then 
Tasksync._tasksync = true 
Tasksync.tasksjob = {}
Tasksync.taskstodo = {}
Tasksync._debug = false
local resourceName = GetCurrentResourceName()
local GetAmountOfLoops = function(style)
		local nowTable
		if style == "loop" then 
			nowTable = (Tasksync.tasksjob)
		elseif style == "loopcustom" then  
			nowTable = (Tasksync.tasksjob_custom)
		elseif style == "looponce" then  
			nowTable = (Tasksync.tasksjob_once)
		end 
		local total = 0 
		for i,v in pairs(nowTable) do 
			local n = #v
			total = total + n
		end
		return total 
end 
AddEventHandler("Tasksync:ShowDebug",function(resourcename)
	Tasksync._debug = not Tasksync._debug 
end)
Tasksync.__createbytemplate = function(durationgroup)
	TriggerEvent("addlooplog",GetCurrentResourceName())
	CreateThread(function()
		local jobs = Tasksync.tasksjob
		local todo = Tasksync.taskstodo
		local tasks = jobs[durationgroup]
		local duration = tonumber(durationgroup)
		
		repeat
			if tasks then 
				
				local debugtext = {}
				
				for i=1,#tasks do 
					local jobname = tasks[i]
					local fn = todo[jobname]
					if Tasksync._debug and jobname then 
						table.insert(debugtext,resourceName.." (loop) "..jobname.." "..durationgroup)
					end
					if fn then fn() end 
				end 
				if Tasksync._debug then 
					for i,v in pairs(debugtext) do 
						print(v)
					end 
					print("Normal Loop Total",GetAmountOfLoops("loop"))
					print("Spaming after 3 seconds") Wait(3000)
				end 
			end 
			Wait(duration)
		until not tasks 
		--print('breaked2')
		return 
	end)
end 	
Tasksync.addloop = function(jobname,durationgroup,fn) --jobname,duration,function
	local durationgroup = tostring(durationgroup)
	
	if Tasksync.taskstodo[jobname] ~= nil then error('Duplicated taskjob: '..jobname, 2) ; return end 
	Tasksync.taskstodo[jobname] = fn 
	
	local creatable = false 
	if Tasksync.tasksjob[durationgroup] == nil then creatable = true; Tasksync.tasksjob[durationgroup] = {}; end 
	table.insert(Tasksync.tasksjob[durationgroup],jobname)
	if creatable then 
		Tasksync.__createbytemplate(durationgroup)
	end 
end 
Tasksync.deleteloop = function(jobname)
	for durationgroup,v in pairs(Tasksync.tasksjob) do 
		for i=1,#Tasksync.tasksjob[durationgroup] do 
			if Tasksync.tasksjob[durationgroup][i] == jobname then 
				Tasksync.taskstodo[jobname] = nil 
				table.remove(Tasksync.tasksjob[durationgroup],i)
				TriggerEvent("deletelooplog",GetCurrentResourceName())
				if #Tasksync.tasksjob[durationgroup] == 0 then 
					Tasksync.tasksjob[durationgroup] = nil
				end 
			end 
		end 
	end 
end 

end 
