
if not Tasksync then 
	Tasksync = setmetatable({},{})
end 
if not Tasksync._tasksync_custom then 
Tasksync._tasksync_custom = true 
Tasksync.tasksjob_custom = {}
Tasksync.taskstodo_custom = {}
Tasksync.taskstodo_custom_newduration = {}
Tasksync._debug = false
local resourceName = GetCurrentResourceName()
local GetAmountOfLoops = function(style)
		local nowTable
		if style == "loop" then 
			nowTable = (Tasksync.tasksjob)
		elseif style == "loopcustom" then  
			nowTable = (Tasksync.tasksjob_custom)
		elseif style == "looponce" then  
			nowTable = (Tasksync.tasksjob_once)
		end 
		local total = 0 
		for i,v in pairs(nowTable) do 
			local n = #v
			total = total + n
		end
		return total 
end 
AddEventHandler("Tasksync:ShowDebug",function(resourcename)
	Tasksync._debug = not Tasksync._debug 
end)
Tasksync.set_custom_duration = function(customgroup,newduration)
	Tasksync.taskstodo_custom_newduration[customgroup] = newduration
end 
Tasksync.get_custom_duration = function(customgroup)
	return Tasksync.taskstodo_custom_newduration[customgroup]
end 
Tasksync.__createbytemplate_custom = function(customgroup,defaultduration)
	TriggerEvent("addloopcustomlog",GetCurrentResourceName())
	CreateThread(function()
		local todo = Tasksync.taskstodo_custom
		local jobname = customgroup
		local delaySetter = {setter=setmetatable({},{__call = function(t,newduration) Tasksync.set_custom_duration(customgroup,newduration) end}),getter=function(t,newduration) return Tasksync.get_custom_duration(customgroup) end}
		local fn = todo[jobname]
		
		repeat
			if Tasksync._debug then 
				print(resourceName.." (loopcustom) "..customgroup)
				print("Custom Loop Total",GetAmountOfLoops("loopcustom"))
				print("Spaming after 3 seconds") Wait(3000)
			end 
			if fn then fn(delaySetter) end 
			Wait(Tasksync.taskstodo_custom_newduration[customgroup])
		until not todo[customgroup] 
		--if true then  print('breaked'..customgroup) end
		return 
	end)
end 	
Tasksync.addloopcustom = function(customgroup,defaultduration,fn) --jobname,duration,function
	if Tasksync.taskstodo_custom[customgroup] ~= nil then error('Duplicated taskjob: '..jobname, 2) ; return end 
	Tasksync.taskstodo_custom[customgroup] = fn 
	Tasksync.taskstodo_custom_newduration[customgroup] = defaultduration
	Tasksync.__createbytemplate_custom(customgroup,defaultduration)
end 
Tasksync.deleteloopcustom = function(customgroup)
	TriggerEvent("deleteloopcustomlog",GetCurrentResourceName())
	Tasksync.taskstodo_custom[customgroup] = nil
	
end 

end 

