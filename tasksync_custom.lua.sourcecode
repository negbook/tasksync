if not Tasksync then 
	Tasksync = setmetatable({},{})
end 
if not Tasksync._initialized_tasksync_custom then 
Tasksync._initialized_tasksync_custom = true 
local LoopsGroup = {}
local LoopsTodoFn = {}
local LoopsTodoFnWhenBreak = {}
local resourceName = GetCurrentResourceName()
local _getAmountsOfLoopType = function()
		local nowTable = (LoopsGroup)
		local total = 0 
		for i,v in pairs(nowTable) do 
			local n = #v
			total = total + n
		end
		return total 
end 

Tasksync.__createDepartmentGardenCustom = function(jobName,defaultduration)
	CreateThread(function()
		local delaySetter = {setter=setmetatable({},{__call = function(t,newduration) Tasksync.setloopcustomduration(jobName,newduration) end}),getter=function(t,newduration) return Tasksync.getloopcustomduration(jobName) end}
		local fn = LoopsGroup[jobName]
		while fn do 
			fn(delaySetter)
			Wait(LoopsTodoFnWhenBreak[jobName])
		end 
		--if true then  print('breaked'..jobName) end
		return 
	end)
end 	
Tasksync.addloopcustom = function(jobName,defaultduration,fn_todo,fn_todoend) --jobName,duration,function
	if LoopsGroup[jobName] ~= nil then error('Duplicated taskjob: '..jobName, 2) ; return end 
	LoopsGroup[jobName] = fn_todo 
	if fn_todoend then 
		LoopsTodoFn[jobname] = fn_todoend  
	end 
	LoopsTodoFnWhenBreak[jobName] = defaultduration
	Tasksync.__createDepartmentGardenCustom(jobName,defaultduration)
end 
Tasksync.insertloopcustom = Tasksync.addloopcustom
Tasksync.deleteloopcustom = function(jobName)
	if LoopsTodoFn[jobName] then LoopsTodoFn[jobName]() end 
	LoopsTodoFn[jobName] = nil 
	LoopsGroup[jobName] = nil
end 
Tasksync.setloopcustomduration = function(jobName,newduration)
	LoopsTodoFnWhenBreak[jobName] = newduration
end 
Tasksync.getloopcustomduration = function(jobName)
	return LoopsTodoFnWhenBreak[jobName]
end 
end 