if not Tasksync then 
	Tasksync = setmetatable({},{})
end 
if not Tasksync._initialized_tasksync_custom then 
Tasksync._initialized_tasksync_custom = true 
Tasksync._jobTodo_tasksync_custom = {}
Tasksync._jobSpeed_tasksync_custom = {}
Tasksync._debug = false
local resourceName = GetCurrentResourceName()
local _getAmountsOfLoopType = function(style)
		local nowTable
		if style == "loop" then 
			nowTable = (Tasksync.tasksjob)
		elseif style == "loopcustom" then  
			nowTable = (Tasksync._jobTodo_tasksync_custom)
		elseif style == "looponce" then  
			nowTable = (Tasksync.tasksjob_once)
		end 
		local total = 0 
		for i,v in pairs(nowTable) do 
			local n = #v
			total = total + n
		end
		return total 
end 
AddEventHandler("Tasksync:ShowDebug",function(resourcename)
	Tasksync._debug = not Tasksync._debug 
end)
Tasksync.__createDepartmentGardenCustom = function(jobName,defaultduration)
	CreateThread(function()
		local delaySetter = {setter=setmetatable({},{__call = function(t,newduration) Tasksync.setloopcustomduration(jobName,newduration) end}),getter=function(t,newduration) return Tasksync.getloopcustomduration(jobName) end}
		local fn = Tasksync._jobTodo_tasksync_custom[jobName]
		while fn do 
			if Tasksync._debug then 
				print(resourceName.." (loopcustom) "..jobName)
				print("Custom Loop Total",_getAmountsOfLoopType("loopcustom"))
				print("Spaming after 3 seconds") Wait(3000)
			end 
			fn(delaySetter)
			Wait(Tasksync._jobSpeed_tasksync_custom[jobName])
		end 
		--if true then  print('breaked'..jobName) end
		return 
	end)
end 	
Tasksync.addloopcustom = function(jobName,defaultduration,fn) --jobName,duration,function
	if Tasksync._jobTodo_tasksync_custom[jobName] ~= nil then error('Duplicated taskjob: '..jobName, 2) ; return end 
	Tasksync._jobTodo_tasksync_custom[jobName] = fn 
	Tasksync._jobSpeed_tasksync_custom[jobName] = defaultduration
	Tasksync.__createDepartmentGardenCustom(jobName,defaultduration)
end 
Tasksync.insertloopcustom = Tasksync.addloopcustom
Tasksync.deleteloopcustom = function(jobName)
	Tasksync._jobTodo_tasksync_custom[jobName] = nil
end 
Tasksync.setloopcustomduration = function(jobName,newduration)
	Tasksync._jobSpeed_tasksync_custom[jobName] = newduration
end 
Tasksync.getloopcustomduration = function(jobName)
	return Tasksync._jobSpeed_tasksync_custom[jobName]
end 
end 