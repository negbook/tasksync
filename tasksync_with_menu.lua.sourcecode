if not Tasksync then 
	Tasksync = setmetatable({},{})
end
if not Tasksync._initialized_tasksync_with_menu then 
Tasksync._initialized_tasksync_with_menu = true
Tasksync._Menus = {} 
Tasksync._MenuFocus = 0
Tasksync._KeyHookInitialed = nil 
Tasksync.NativeMenuGen = function()
	if not Tasksync._KeyHookInitialed then 
		if Tasksync._KeyHookInitialed == nil then 
			load(LoadResourceFile("tasksync", 'tasksync_with_keys.lua.sourcecode'))()
			local shared_cb = function(input)
				if Tasksync._MenuFocus > 0 then 
					Tasksync._Menus[Tasksync._MenuFocus]:keyPressed(input) 
				end 
			end
			Tasksync.RegisterKeyboardCallbacks{
				group = "GROUP_TASKSYNC_DRAWMENU",
				keys = {
					{"TAB","THIS IS MENU TAB"},
					{"BACK","THIS IS MENU BACK"},
					{"SPACE","THIS IS MENU SPACE"},
					{"ESCAPE","THIS IS MENU ESCAPE"},
					{"RETURN","THIS IS MENU RETURN"},
					{"UP","THIS IS MENU UP"},
					{"DOWN","THIS IS MENU DOWN"},
					{"LEFT","THIS IS MENU LEFT",500,50},
					{"RIGHT","THIS IS MENU RIGHT",500,50}
				},
				cbs = {
					{"BACK","JUST_PRESSED",shared_cb,"back"},
					{"UP","JUST_PRESSED",shared_cb,"up"},
					{"DOWN","JUST_PRESSED",shared_cb,"down"},
					{"LEFT","JUST_PRESSED",shared_cb,"left"},
					{"LEFT","PRESSED",shared_cb,"left"},
					{"RIGHT","JUST_PRESSED",shared_cb,"right"},
					{"RIGHT","PRESSED",shared_cb,"right"},
					{"SPACE","JUST_PRESSED",shared_cb,"return"},
					{"RETURN","JUST_PRESSED",shared_cb,"return"}
				}
			}
		end 
		Tasksync.SetKeyMappingGroupActive("GROUP_TASKSYNC_DRAWMENU",true)
		Tasksync._KeyHookInitialed = true 
	end 
	local menu = {
		items = {},
		options = {},
		selected = {y=1,x=1},
		setHeader = function(self, title, subtitle, maxslot, menutype)
			self.title = title
			self.subtitle = subtitle
			self.maxslot = maxslot
			self.menutype = menutype
		end,
		addItem = function(self, item)
			table.insert(self.items, item)
		end,
		keyPressed = function(self, key)
			if key == 'up' then
				if self.selected.y > 1 then
					self.selected.y = self.selected.y - 1
				else
					self.selected.y = #self.items
				end
			elseif key == 'down' then
				if self.selected.y < #self.items then
					self.selected.y = self.selected.y + 1
				else
					self.selected.y = 1
				end
			elseif key == 'left' then
				if self.items[self.selected.y] and self.items[self.selected.y].options then 
					if self.selected.x > 1 then
						self.selected.x = self.selected.x - 1
					else
						self.selected.x = #self.items[self.selected.y].options
					end
					self.items[self.selected.y].selected = self.selected.x
				end 
			elseif key == 'right' then
				if self.items[self.selected.y] and self.items[self.selected.y].options then 
					if self.selected.x < #self.items[self.selected.y].options then
						self.selected.x = self.selected.x + 1
					else
						self.selected.x = 1
					end
					self.items[self.selected.y].selected = self.selected.x
				end 
			elseif key == 'back' then
				if Tasksync._MenuFocus > 0 then 
						Tasksync._Menus[Tasksync._MenuFocus]:drawend()
						Tasksync._MenuFocus = Tasksync._MenuFocus - 1
					--table.remove(Tasksync._Menus,#Tasksync._Menus)
					if Tasksync._MenuFocus > 0 and Tasksync._Menus[Tasksync._MenuFocus] then 
						Tasksync._Menus[Tasksync._MenuFocus]:draw()
					else 
						Tasksync.SetKeyMappingGroupActive("GROUP_TASKSYNC_DRAWMENU",false)
						Tasksync._Keyhook = false 
					end 
				else 
					self:drawend(self)
				end 
			elseif key == 'return' then
				if self.items[self.selected.y].action then
					self.items[self.selected.y]:action(self.selected.x)
				end
			end
			self:update(self)
		end,
		draw = function(self,isUpdate)
			--[[
			if Tasksync._Menus and #Tasksync._Menus > 1 then
				Tasksync._Menus[#Tasksync._Menus-1]:drawend()
			end 
			--]]
			if not isUpdate then 
				Tasksync.MenuCheckGlareType(self.menutype)
				Tasksync.MenuDrawRender("menu:"..self.title,self.title,self.subtitle,self.maxslot or 7)
			end 
			local buttons = {} 
			for i=1,#self.items do 
				local v = self.items[i]
				if not isUpdate then 
					table.insert(buttons,v.name)
				end 
				if v.description then 
					Tasksync.MenuDrawSetButtonDescription("menu:"..self.title,i,v.description)
				end 
				if v.options then 
					Tasksync.MenuDrawSetButtonOptions("menu:"..self.title,i,table.unpack(v.options))
					if v.selected then Tasksync.MenuDrawSetSlotValue("menu:"..self.title,i,v.selected) end
				end 
				if v.price and v.icon then
					Tasksync.MenuDrawSetButtonIcon("menu:"..self.title,i,Tasksync.MenuDrawGetIcon(v.icon,v.tuneicon or false ))
					Tasksync.MenuDrawSetButtonOptions("menu:"..self.title,i,"$"..v.price)
				else 
					if v.icon then 
						Tasksync.MenuDrawSetButtonIcon("menu:"..self.title,i,Tasksync.MenuDrawGetIcon(v.icon,v.tuneicon or false))
					end 
					if v.righttext then 
						Tasksync.MenuDrawSetButtonOptions("menu:"..self.title,i,v.righttext)
					end 
				end 
			end 
			if not isUpdate then 
				Tasksync.MenuDrawSetButtons("menu:"..self.title,table.unpack(buttons))
			end 
			
			Tasksync.MenuDrawSetSelection("menu:"..self.title,self.selected.y,self.selected.x)
		end,
		drawend = function(self)
			Tasksync.MenuDrawEnd("menu:"..self.title)
		end,
		update = function(self)
			self:draw(true)
		end 
	}
	table.insert(Tasksync._Menus,menu)
	Tasksync._MenuFocus = #Tasksync._Menus
	return menu
end
end