local switch=setmetatable({},{__call=function(a,b)_G.case=setmetatable({},{__call=function(a,...)return a[{...}]end,__index=function(a,c)local d=false;if c and type(c)=="table"then for e=1,#c do local f=c[e]if f and b and f==b then d=true;break end end end;if d then return setmetatable({},{__call=function(a,g)_G.default=setmetatable({},{__call=function(a,h)end})return g()end})else return function()end end end})_G.default=setmetatable({},{__call=function(a,b)if b and type(b)=="function"then return b()end end})return a[b]end,__index=function(a,f)return setmetatable({},{__call=function(a,...)local i={...}for j=1,#i do local k=i[j]if k~=nil then return k end end;return nil end})end})
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_drawmenu then 
Tasksync._initialized_tasksync_with_drawmenu = true 
load(LoadResourceFile("tasksync", 'tasksync_with_keys.lua.sourcecode'))()
local shared_cb = function(input)
	local action = {}
	local menugroup = Tasksync.GetCurrentMenuGroup ()
	if menugroup then 
		action["up"] = function()
			local selection = Tasksync.MenuDrawGetSelection(menugroup) 
			return Tasksync.MenuDrawSetSelection(menugroup,selection - 1)
		end 
		action["down"] = function()
			local selection = Tasksync.MenuDrawGetSelection(menugroup) 
			return Tasksync.MenuDrawSetSelection(menugroup,selection + 1)
		end 
		action["left"] = function()
			local slot =  Tasksync.MenuDrawGetSelection(menugroup)
			local selection = Tasksync.MenuDrawGetSlotSelection(menugroup,slot) 
			return Tasksync.MenuDrawSetSlotSelection(menugroup,slot,selection - 1)
		end 
		action["right"] = function()
			local slot =  Tasksync.MenuDrawGetSelection(menugroup)
			local selection = Tasksync.MenuDrawGetSlotSelection(menugroup,slot) 
			return Tasksync.MenuDrawSetSlotSelection(menugroup,slot,selection + 1)
		end 
		print(input)
	return action[input] and action[input]()
	end 
	return 
end
Tasksync.RegisterKeyTable{
	group = "GROUP_TASKSYNC_DRAWMENU",
	keys = {
		{"TAB","THIS IS MENU TAB"},
		{"BACK","THIS IS MENU BACK"},
		{"SPACE","THIS IS MENU SPACE"},
		{"ESCAPE","THIS IS MENU ESCAPE"},
		{"RETURN","THIS IS MENU RETURN"},
		{"UP","THIS IS MENU UP"},
		{"DOWN","THIS IS MENU DOWN"},
		{"IOM_WHEEL_UP","THIS IS MENU IOM_WHEEL_UP"},
		{"IOM_WHEEL_DOWN","THIS IS MENU IOM_WHEEL_DOWN"},
		{"LEFT","THIS IS MENU LEFT",500,50},
		{"RIGHT","THIS IS MENU RIGHT",500,50}
	},
	cbs = {
		{"BACK","JUST_PRESSED",shared_cb,"back"},
		{"UP","JUST_PRESSED",shared_cb,"up"},
		{"DOWN","JUST_PRESSED",shared_cb,"down"},
		{"LEFT","JUST_PRESSED",shared_cb,"left"},
		{"LEFT","PRESSED",shared_cb,"left"},
		{"RIGHT","JUST_PRESSED",shared_cb,"right"},
		{"RIGHT","PRESSED",shared_cb,"right"},
		{"SPACE","JUST_PRESSED",shared_cb,"return"},
		{"RETURN","JUST_PRESSED",shared_cb,"return"},
		{"IOM_WHEEL_UP","JUST_PRESSED",shared_cb,"IOM_WHEEL_UP"},
		{"IOM_WHEEL_DOWN","JUST_PRESSED",shared_cb,"IOM_WHEEL_DOWN"}
	}
}
Tasksync.SetKeyGroupActive("GROUP_TASKSYNC_DRAWMENU",false)
local menuWidth = 0.258
local titleHeight = 0.091
local buttonHeight = 0.038
local buttonRectHeight = 0
local buttonFont = 0
local buttonScale = 0.365
local buttonTextXOffset = 0.005
local buttonTextYOffset = 0.005
local basicx = 0.0525
local basicy = 0.085
local getmenuWidth = function() 
	return menuWidth 
end 
local basicRectDrawingX = (basicx + getmenuWidth() / 2)
local basicbuttony = (basicy + titleHeight + buttonTextYOffset)
local basicfont = 0
local buttonTransparent = 140
local lastY
local function _ResetRects(y)
	lastY = y
end 
local function _drawMenuRect(height, color, offsetY, alpha)
	local y = lastY + (offsetY or 0.0)
	local r,g,b,a = GetHudColour(color)
    DrawRect(basicRectDrawingX, y + height / 2, getmenuWidth(), height, r, g, b, (alpha or a))
	lastY = y + height 
	return lastY
end
local function _drawMenuSprite(sprite, height, color, offsetY, alpha)
	local y = lastY + (offsetY or 0.0)
	local r,g,b,a = GetHudColour(color)
    DrawSprite("CommonMenu", sprite ,basicRectDrawingX,y + height / 2,getmenuWidth(), height,0, r, g, b, (alpha or a))
	lastY = y + height 
	return lastY
end
local function _drawMenuRectHighLight(y, height, color, offsetY, alpha)
	local r,g,b,a = GetHudColour(color)
	DrawRect(basicRectDrawingX, y + height / 2, getmenuWidth(), height, r, g, b, (alpha or a))
end
local function _drawMenuSpriteHighLight(y, height, color, offsetY, alpha)
	local r,g,b,a = GetHudColour(color)
	DrawSprite("CommonMenu", "Gradient_Nav",basicRectDrawingX,y + height / 2,getmenuWidth(),height,0, r,g,b,(alpha or a))
end
local function _drawTextXY(text,x,y,color,font,scale)
	SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
	BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    return EndTextCommandDisplayText(x, y)
end 
local function _drawMenuText(text, x, y, font, color, scale, ishighlight)
	if ishighlight then 
		_drawMenuSpriteHighLight(y ,buttonHeight, 0, 0.0, 255)
	end 
    _drawTextXY(text, x + buttonTextXOffset, y, color,font,scale)
end
local function _drawMenuTextShadow(text, x, y, font, color, scale, ishighlight)
	if ishighlight then 
		_drawMenuSpriteHighLight(y ,buttonHeight, 0, 0.0, 255)
	end 
    SetTextDropShadow(2, 2, 0, 0, 0)
    _drawTextXY(text, x + buttonTextXOffset, y, color,font,scale)
end
local function _drawMenuText_Right(text, x, y, font, color, scale)
    SetTextWrap(basicx, basicx + getmenuWidth() - buttonTextXOffset)
    SetTextRightJustify(true)
    _drawTextXY(text, x, y, color,font,scale)
end
local function _drawTextCenter(text, x, y, font, color, scale, shadow, alignRight)
    if shadow then
        SetTextDropShadow(2, 2, 0, 0, 0)
    end
    SetTextCentre(center)
    _drawTextXY(text, x, y, color,font,scale)
end
local function _drawMenuTextArray(text, x, y, font, color, scale,showArrow)
	--SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
	BeginTextCommandGetWidth("STRING")
	AddTextComponentSubstringPlayerName(text)
	local width = EndTextCommandGetWidth(true)
	if showArrow then 
		local iconRight = "arrowright"
		local iconLeft = "arrowleft"
		local height = 0.032 
		DrawSprite("CommonMenu", iconLeft ,x + getmenuWidth() - width - (buttonTextXOffset * 4),y + height / 2, height/GetAspectRatio(), height,0, GetHudColour(color))
		_drawTextXY(text, x + getmenuWidth() - width - (buttonTextXOffset * 3), y, color, font, scale)
		DrawSprite("CommonMenu", iconRight ,x + getmenuWidth() - (buttonTextXOffset * 2),y + height / 2, height/GetAspectRatio(), height,0, GetHudColour(color))
	else 
		_drawTextXY(text, x + getmenuWidth() - width - (buttonTextXOffset * 3), y, color, font, scale)
	end 
end 
local function _drawMenuIcon_Right(y,iconName)
	if iconName then 
		DrawSprite("CommonMenu", iconName ,basicx + getmenuWidth() - (buttonTextXOffset * 4),y + buttonHeight / 2, buttonHeight/GetAspectRatio(), buttonHeight,0, GetHudColour(color))
	end 
end 
local _drawButton = function(y,text,righttext,optionselected,icon,ishighlight)
	if ishighlight then 
		_drawMenuText(text,basicx,y,buttonFont,2,buttonScale, true)
		if righttext and icon then 
			_drawMenuTextArray(righttext[optionselected],basicx - buttonTextXOffset*4,y,buttonFont,2,buttonScale,#righttext > 1 and true or false)
			_drawMenuIcon_Right(y,icon)
		else 
			if righttext then 
				_drawMenuTextArray(righttext[optionselected],basicx,y,buttonFont,2,buttonScale,#righttext > 1 and true or false)
			end 
			if icon then 
				_drawMenuIcon_Right(y,icon)
			end 
		end 
	else 
		_drawMenuText(text,basicx,y,buttonFont,0,buttonScale, false)
		if righttext and icon then 
			_drawMenuTextArray(righttext[optionselected],basicx - buttonTextXOffset*4,y,buttonFont,0,buttonScale,#righttext > 1 and true or false)
			_drawMenuIcon_Right(y,icon)
		else 
			if righttext then 
				_drawMenuTextArray(righttext[optionselected],basicx,y,buttonFont,0,buttonScale,#righttext > 1 and true or false)
			end 
			if icon then 
				_drawMenuIcon_Right(y,icon)
			end 
		end 
	end 
end 
local _initMenuScroll = function()
	DrawSprite("CommonMenu", "shop_arrows_upANDdown", basicRectDrawingX, _drawMenuRect(buttonHeight, 140, 0.002, 220) - buttonHeight / 2, 0.032, buttonHeight, 0, GetHudColour(0));
end 
local _setMenuDescription = function(desc)
	if desc then 
		_drawMenuRect(0.0015, 2, 0.0050, 255)
		_drawMenuText(desc,basicx,_drawMenuSprite("Gradient_Bgd", buttonHeight, 0, 0.0, 255)-buttonHeight + 0.0025,buttonFont,0,buttonScale)
	end 
end 
local m_Special = {}
local m_Buttons = {}
local m_ButtonDescriptions = {}
local m_Title = {} 
local m_Subtitle = {} 
local m_Maxslot = {} 
local m_ShouldScroll = {} 
local m_ButtonIcons = {}
local m_ButtonOptions = {}
local m_MenuSlotSelection = {}
local m_Selection = {}
local m_CurrentMenuGroups = {}
Tasksync.MenuDrawSetButtons = function(menugroup,...)
	if not m_Buttons[menugroup] then m_Buttons[menugroup] = {} end 
	m_Buttons[menugroup] = {...}
	if #m_Buttons[menugroup] > m_Maxslot[menugroup] then m_ShouldScroll[menugroup] = true 
	else m_ShouldScroll[menugroup] = false  end 
	if not Tasksync.MenuDrawGetSelection(menugroup) then 
		Tasksync.MenuDrawSetSelection(menugroup,1)
	end 

end 
Tasksync.MenuDrawGetButtons = function(menugroup)
	return m_Buttons[menugroup] or {}
end 
Tasksync.MenuDrawSetButtonDescription = function(menugroup,slot,description)
	if not m_ButtonDescriptions[menugroup] then m_ButtonDescriptions[menugroup] = {} end 
	m_ButtonDescriptions[menugroup][slot] = description
end 
Tasksync.MenuDrawSetButtonOptions = function(menugroup,slot,...)
	if not m_ButtonOptions[menugroup] then m_ButtonOptions[menugroup] = {} end 
	m_ButtonOptions[menugroup][slot] = {...}
	if not Tasksync.MenuDrawGetSlotSelection(menugroup,slot) then 
		Tasksync.MenuDrawSetSlotSelection(menugroup,slot, 1)
	end 
end 
Tasksync.MenuDrawGetButtonOptions = function(menugroup,slot)
	local bdo = m_ButtonOptions[menugroup]
	local bdov = m_MenuSlotSelection[menugroup]
	return bdo and bdo[slot],bdov and bdov[slot] or 1
end 
Tasksync.MenuDrawGetButtonDescription = function(menugroup,slot)
	local bds = m_ButtonDescriptions[menugroup]
	return bds and bds[slot]
end 
Tasksync.MenuDrawSetButtonIcon = function(menugroup,slot,iconName)
	if not m_ButtonIcons[menugroup] then m_ButtonIcons[menugroup] = {} end 
	m_ButtonIcons[menugroup][slot] = iconName
end 
Tasksync.MenuDrawGetButtonIcon = function(menugroup,slot)
	local bdicon = m_ButtonIcons[menugroup]
	return bdicon and bdicon[slot]
end 
Tasksync.MenuDrawSetSlotSelection = function(menugroup,slot,selection_x)
	if not m_MenuSlotSelection[menugroup] then m_MenuSlotSelection[menugroup] = {} end 
	local options = Tasksync.MenuDrawGetButtonOptions(menugroup,slot)
	if options then 
		if options and #options >= 1 then 
		
			if selection_x <= 0 then 
				selection_x = (selection_x-1)%#options+1
			elseif selection_x > #options then 
				selection_x = selection_x%#options
				if selection_x <= 0 then 
					selection_x = (selection_x-1)%#options+1
				end 
			end 
		end 
	else 
		selection_x = 1
	end 
	m_MenuSlotSelection[menugroup][slot] = selection_x 
	return m_MenuSlotSelection[menugroup][slot] 
end 
Tasksync.MenuDrawGetSlotSelection = function(menugroup,slot)
	local slotselection = m_MenuSlotSelection and m_MenuSlotSelection[menugroup] and m_MenuSlotSelection[menugroup][slot]
	return slotselection
end 
Tasksync.MenuDrawSetSelection = function(menugroup,y)
	local buttons = Tasksync.MenuDrawGetButtons(menugroup)
	--if not x then x = 1 end  
	if not y then y = 1 end 
	if buttons and #buttons >= 1 then  
		if y <= 0 then 
			y = (y-1)%#buttons+1
		elseif y > #buttons then 
			y = y%#buttons
			if y <= 0 then 
				y = (y-1)%#buttons+1
			end 
		end 
		
	end 
	m_Selection[menugroup] = y
	return m_Selection[menugroup]
end 
Tasksync.MenuDrawGetSelection = function(menugroup,needx)
	local selection = m_Selection[menugroup]
	return selection
end 

Tasksync.MenuDrawEnd = function(menugroup)
	if m_CurrentMenuGroups and #m_CurrentMenuGroups > 0 then 
		for i,v in pairs(m_CurrentMenuGroups) do 
			if v == menugroup then 
				table.remove(m_CurrentMenuGroups,i)
				if #m_CurrentMenuGroups == 0 then 
					if m_Special["PI"] and Tasksync.ScaleformEnd then 
						Tasksync.ScaleformEnd("MP_MENU_GLARE")
						m_Special["PI"] = false 
					end 
					Tasksync.deletelooponce("tasksync_drawmenu")
					Tasksync.SetKeyGroupActive("GROUP_TASKSYNC_DRAWMENU",false)
				end 
			end 
		end 
	end 
end 
Tasksync.MenuEnd = Tasksync.MenuDrawEnd
Tasksync.MenuCheckGlareType = function(menutype)
	local menutype = menutype or "default"
	if menutype == "PI" or menutype == "PersonalInteraction" then 
		if not m_Special["PI"] then 
			m_Special["PI"] = true 
			CreateThread(function()
				load(LoadResourceFile("tasksync", 'tasksync_with_scaleform.lua.sourcecode'))()
				Tasksync.ScaleformDrawMini("MP_MENU_GLARE",0.5,0.5,1.0,1.0,255,255,255,255,0,function(initialise)
					initialise("SET_DATA_SLOT",0.5,true)
				end,5)
			end)
		end 
	else 
		if m_Special["PI"] then 
			if m_Special["PI"] and Tasksync.ScaleformEnd then 
				Tasksync.ScaleformEnd("MP_MENU_GLARE")
				m_Special["PI"] = false 
			end 
		end 
	end 
end 

Tasksync.MenuDrawInit = function(menugroup,title,subtitle,maxslot)
	local maxslot = maxslot or 7
	m_Maxslot[menugroup] =  maxslot
	m_Title[menugroup] = title
	m_Subtitle[menugroup] = subtitle
end 
Tasksync.GetCurrentMenuGroup = function()
	return m_CurrentMenuGroups and m_CurrentMenuGroups[#m_CurrentMenuGroups]
end 
Tasksync.MenuDrawRender = function(menugroup)
	RequestStreamedTextureDict( "commonmenu" )
	while not HasStreamedTextureDictLoaded("commonmenu") do Wait(0) end
	--Tasksync.MenuDrawSetSelection(menugroup,1)
	local found 
	for i,v in pairs(m_CurrentMenuGroups) do 
			if v == menugroup then
				found = true 
			end 
	end 
	if not found then 
		table.insert(m_CurrentMenuGroups,menugroup)
	end 
	Tasksync.SetKeyGroupActive("GROUP_TASKSYNC_DRAWMENU",true)
	
	Tasksync.addlooponce("tasksync_drawmenu",0,function()
		local menugroup = m_CurrentMenuGroups[#m_CurrentMenuGroups]
		local maxslot = m_Maxslot[menugroup]
		SetScriptGfxDrawOrder(0)
		SetScriptGfxAlign(76, 84);
		SetScriptGfxAlignParams(-0.05 + 0.0, -0.05 + 0.0, 0 + 0.0, 0 + 0.0);
		_ResetRects(basicy)
		--_drawMenuRect(titleHeight, 178)
		_drawMenuSprite("interaction_bgd",titleHeight, 0, 0.0, 255)
		local subtitley = _drawMenuRect(buttonHeight, 140, 0.0, 220)
		_drawMenuTextShadow(m_Title[menugroup] , basicx, basicy + 0.03 , basicfont,0, 0.5)
		_drawMenuText(m_Subtitle[menugroup] , basicx, basicbuttony, buttonFont, 9, buttonScale)
		local bts = Tasksync.MenuDrawGetButtons(menugroup)
		local btsT = #bts
		if btsT > 0 then 
			local isScroll = m_ShouldScroll[menugroup]
			local selection = Tasksync.MenuDrawGetSelection(menugroup)
			if isScroll then 
				_drawMenuText_Right(selection .. ' / '..btsT, basicx + getmenuWidth(), basicbuttony, buttonFont, 9, buttonScale) 
				_drawMenuSprite("Gradient_Bgd", buttonHeight * maxslot, 0, 0.0, 255)
			else 
				_drawMenuSprite("Gradient_Bgd", buttonHeight * btsT, 0, 0.0, 255)
			end 
			
			local from, to = 1, maxslot 
			if isScroll and selection > maxslot then 
				from, to = selection-(maxslot-1),selection
			end 
			local n = 0
			for i = from, to, 1 do 
				n = n + 1
				local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
				local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
				_drawButton(basicbuttony + buttonHeight * n,bts[i],righttextarray,optionselection,icon,selection == i)
			end 
			if isScroll then 
				_initMenuScroll()
			end 
			_setMenuDescription(Tasksync.MenuDrawGetButtonDescription(menugroup,selection))
		end 
		ResetScriptGfxAlign();
	end)
end 
Tasksync.MenuDrawGetIcon = function(icontype, ed) --max:61 dont use it in loop/draws
	local icons = {}
	local icontype = icontype + 1
	
	icons = {
		{"",""},
		{"shop_NEW_Star","shop_NEW_Star"},
		{"shop_NEW_Star","shop_NEW_Star"},
		{"MP_hostCrown","MP_hostCrown"},
		{"Shop_Tick_Icon","Shop_Tick_Icon"},
		{"Shop_Box_TickB","Shop_Box_Tick"},
		{"Shop_Box_CrossB","Shop_Box_Cross"},
		{"Shop_Box_BlankB","Shop_Box_Blank"},
		{"shop_NEW_Star","shop_NEW_Star"},
		{"Shop_Clothing_Icon_B","Shop_Clothing_Icon_A"},
		{"Shop_GunClub_Icon_B","Shop_GunClub_Icon_A"},
		{"Shop_Tattoos_Icon_B","Shop_Tattoos_Icon_A"},
		{"Shop_Garage_Icon_B","Shop_Garage_Icon_A"},
		{"Shop_Garage_Bike_Icon_B","Shop_Garage_Bike_Icon_A"},
		{"Shop_Barber_Icon_B","Shop_Barber_Icon_A"},
		{"shop_Lock","shop_Lock"},
		{"Shop_Tick_Icon","Shop_Tick_Icon"},
		{"Shop_Ammo_Icon_B","Shop_Ammo_Icon_A"},
		{"Shop_Armour_Icon_B","Shop_Armour_Icon_A"},
		{"Shop_Health_Icon_B","Shop_Health_Icon_A"},
		{"Shop_MakeUp_Icon_B","Shop_MakeUp_Icon_A"},
		{"MP_SpecItem_Coke","MP_SpecItem_Coke"},
		{"MP_SpecItem_Heroin","MP_SpecItem_Heroin"},
		{"MP_SpecItem_Weed","MP_SpecItem_Weed"},
		{"MP_SpecItem_Meth","MP_SpecItem_Meth"},
		{"MP_SpecItem_Cash","MP_SpecItem_Cash"},
		{"arrowleft","arrowleft"},
		{"arrowright","arrowright"},
		{"MP_AlertTriangle","MP_AlertTriangle"},
		{"shop_NEW_Star","shop_NEW_Star"},
		{"Shop_Michael_Icon_B","Shop_Michael_Icon_A"},
		{"Shop_Franklin_Icon_B","Shop_Franklin_Icon_A"},
		{"Shop_Trevor_Icon_B","Shop_Trevor_Icon_A"},
		{"SaleIcon","SaleIcon"},
		{"Shop_Tick_Icon","Shop_Tick_Icon"},
		{"shop_NEW_Star","shop_NEW_Star"},
		{"Shop_Lock_Arena","Shop_Lock_Arena"},
		{"Card_Suit_Clubs","Card_Suit_Clubs"},
		{"Card_Suit_Hearts","Card_Suit_Hearts"},
		{"Card_Suit_Spades","Card_Suit_Spades"},
		{"Card_Suit_Diamonds","Card_Suit_Diamonds"},
		{"Shop_Art_Icon_B","Shop_Art_Icon_A"},
		{"Shop_Art_Icon_B","Shop_Art_Icon_A"},
		{"Shop_Chips_A","Shop_Chips_B"}
	}
	if ed then
		return icons[icontype][0];
	end
	return icons[icontype][1];
end
end 