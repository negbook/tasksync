local switch=setmetatable({},{__call=function(a,b)_G.case=setmetatable({},{__call=function(a,...)return a[{...}]end,__index=function(a,c)local d=false;if c and type(c)=="table"then for e=1,#c do local f=c[e]if f and b and f==b then d=true;break end end end;if d then return setmetatable({},{__call=function(a,g)_G.default=setmetatable({},{__call=function(a,h)end})return g()end})else return function()end end end})_G.default=setmetatable({},{__call=function(a,b)if b and type(b)=="function"then return b()end end})return a[b]end,__index=function(a,f)return setmetatable({},{__call=function(a,...)local i={...}for j=1,#i do local k=i[j]if k~=nil then return k end end;return nil end})end})
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._MenuDrawtasksync_with_drawmenu then 
Tasksync._MenuDrawtasksync_with_drawmenu = true 
local HexToRGBA = function (hex,skipkeys)
	local r = hex >> 24
	local offset = hex - (r << 24)
	local g = offset >> 16
	local offset = offset - (g << 16)
	local b = offset >> 8
	local offset = offset - (b << 8)
	local a = offset
	return (not skipkeys and {r=r,g=g,b=b,a=a}) or {r,g,b,a};
end 
local menuWidth = 0.258
local titleHeight = 0.091
local buttonHeight = 0.038
local buttonRectHeight = 0
local buttonFont = 0
local buttonScale = 0.365
local buttonTextXOffset = 0.005
local buttonTextYOffset = 0.005
local basicx = 0.0525
local basicdrawingx = basicx + menuWidth / 2
local basicy = 0.085
local basicbuttony = basicy + titleHeight + buttonTextYOffset
local basicfont = 0
local buttonTransparent = 140
local lastY
Tasksync.MenuDrawGetIcon = function(icontype, ed) --max:61 dont use it in loop/draws
	local icons = {}
	switch (icontype)(
		case(3)(function()
			icons[0] = "MP_hostCrown";icons[1] = "MP_hostCrown";
		end),
		case(21)(function()
			icons[0] = "MP_SpecItem_Coke";icons[1] = "MP_SpecItem_Coke";
		end),
		case(22)(function()
			icons[0] = "MP_SpecItem_Heroin";icons[1] = "MP_SpecItem_Heroin";
		end),
		case(23)(function()
			icons[0] = "MP_SpecItem_Weed";icons[1] = "MP_SpecItem_Weed";
		end),
		case(24)(function()
			icons[0] = "MP_SpecItem_Meth";icons[1] = "MP_SpecItem_Meth";
		end),
		case(25)(function()
			icons[0] = "MP_SpecItem_Cash";icons[1] = "MP_SpecItem_Cash";
		end),
		case(1)(function()
			icons[0] = "shop_NEW_Star";icons[1] = "shop_NEW_Star";
		end),
		case(2)(function()
			icons[0] = "shop_NEW_Star";icons[1] = "shop_NEW_Star";
		end),
		case(4)(function()
			icons[0] = "Shop_Tick_Icon";icons[1] = "Shop_Tick_Icon";
		end),
		case(6)(function()
			icons[0] = "Shop_Box_CrossB";icons[1] = "Shop_Box_Cross";
		end),
		case(7)(function()
			icons[0] = "Shop_Box_BlankB";icons[1] = "Shop_Box_Blank";
		end),
		case(5)(function()
			icons[0] = "Shop_Box_TickB";icons[1] = "Shop_Box_Tick";
		end),
		case(8)(function()
			icons[0] = "shop_NEW_Star";icons[1] = "shop_NEW_Star";
		end),
		case(9)(function()
			icons[0] = "Shop_Clothing_Icon_B";icons[1] = "Shop_Clothing_Icon_A";
		end),
		case(10)(function()
			icons[0] = "Shop_GunClub_Icon_B";icons[1] = "Shop_GunClub_Icon_A";
		end),
		case(17)(function()
			icons[0] = "Shop_Ammo_Icon_B";icons[1] = "Shop_Ammo_Icon_A";
		end),
		case(18)(function()
			icons[0] = "Shop_Armour_Icon_B";icons[1] = "Shop_Armour_Icon_A";
		end),
		case(19)(function()
			icons[0] = "Shop_Health_Icon_B";icons[1] = "Shop_Health_Icon_A";
		end),
		case(20)(function()
			icons[0] = "Shop_MakeUp_Icon_B";icons[1] = "Shop_MakeUp_Icon_A";
		end),
		case(11)(function()
			icons[0] = "Shop_Tattoos_Icon_B";icons[1] = "Shop_Tattoos_Icon_A";
		end),
		case(12)(function()
			icons[0] = "Shop_Garage_Icon_B";icons[1] = "Shop_Garage_Icon_A";
		end),
		case(13)(function()
			icons[0] = "Shop_Garage_Bike_Icon_B";icons[1] = "Shop_Garage_Bike_Icon_A";
		end),
		case(14)(function()
			icons[0] = "Shop_Barber_Icon_B";icons[1] = "Shop_Barber_Icon_A";
		end),
		case(15)(function()
			icons[0] = "shop_Lock";icons[1] = "shop_Lock";
		end),
		case(16)(function()
			icons[0] = "Shop_Tick_Icon";icons[1] = "Shop_Tick_Icon";
		end),
		case(26)(function()
			icons[0] = "arrowleft";icons[1] = "arrowleft";
		end),
		case(27)(function()
			icons[0] = "arrowright";icons[1] = "arrowright";
		end),
		case(28)(function()
			icons[0] = "MP_AlertTriangle";icons[1] = "MP_AlertTriangle";
		end),
		case(29)(function()
			icons[0] = "shop_NEW_Star";icons[1] = "shop_NEW_Star";
		end),
		case(31)(function()
			icons[0] = "Shop_Michael_Icon_B";icons[1] = "Shop_Michael_Icon_A";
		end),
		case(32)(function()
			icons[0] = "Shop_Franklin_Icon_B";icons[1] = "Shop_Franklin_Icon_A";
		end),
		case(33)(function()
			icons[0] = "Shop_Trevor_Icon_B";icons[1] = "Shop_Trevor_Icon_A";
		end),
		case(51)(function()
			icons[0] = "SaleIcon";icons[1] = "SaleIcon";
		end),
		case(52)(function()
			icons[0] = "Shop_Tick_Icon";icons[1] = "Shop_Tick_Icon";
		end),
		case(54)(function()
			icons[0] = "shop_NEW_Star";icons[1] = "shop_NEW_Star";
		end),
		case(55)(function()
			icons[0] = "Shop_Lock_Arena";icons[1] = "Shop_Lock_Arena";
		end),
		case(56)(function()
			icons[0] = "Card_Suit_Clubs";icons[1] = "Card_Suit_Clubs";
		end),
		case(57)(function()
			icons[0] = "Card_Suit_Hearts";icons[1] = "Card_Suit_Hearts";
		end),
		case(58)(function()
			icons[0] = "Card_Suit_Spades";icons[1] = "Card_Suit_Spades";
		end),
		case(59)(function()
			icons[0] = "Card_Suit_Diamonds";icons[1] = "Card_Suit_Diamonds";
		end),
		case(60)(function()
			icons[0] = "Shop_Art_Icon_B";icons[1] = "Shop_Art_Icon_A";
		end),
		case(62)(function()
			icons[0] = "Shop_Art_Icon_B";icons[1] = "Shop_Art_Icon_A";
		end),
		case(61)(function()
			icons[0] = "Shop_Chips_A";icons[1] = "Shop_Chips_B";
		end),
		case(0)(function()
			icons[0] = "";icons[1] = "";
		end)
	)
	if ed then
		return icons[0];
	end
	return icons[1];
end
local function _ResetRects(y)
	lastY = y
end 
local function _drawMenuRect(height, color, offsetY, alpha)
	local y = lastY + (offsetY or 0.0)
	local r,g,b,a = GetHudColour(color)
    DrawRect(basicdrawingx, y + height / 2, menuWidth, height, r, g, b, (alpha or a))
	lastY = y + height 
	return lastY
end
local function _drawMenuSprite(sprite, height, color, offsetY, alpha)
	local y = lastY + (offsetY or 0.0)
	local r,g,b,a = GetHudColour(color)
    DrawSprite("CommonMenu", sprite ,basicdrawingx,y + height / 2,menuWidth, height,0, r, g, b, (alpha or a))
	lastY = y + height 
	return lastY
end
local function _drawMenuRectHighLight(y, height, color, offsetY, alpha)
	local r,g,b,a = GetHudColour(color)
	DrawRect(basicdrawingx, y + height / 2, menuWidth, height, r, g, b, (alpha or a))
end
local function _drawMenuSpriteHighLight(y, height, color, offsetY, alpha)
	local r,g,b,a = GetHudColour(color)
	DrawSprite("CommonMenu", "Gradient_Nav",basicdrawingx,y + height / 2,menuWidth,height,0, r,g,b,(alpha or a))
end
local function _drawMenuText(text, x, y, font, color, scale, ishighlight)
	if ishighlight then 
		_drawMenuSpriteHighLight(y ,buttonHeight, 0, 0.0, 255)
	end 
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x + buttonTextXOffset, y)
end
local function _drawMenuTextShadow(text, x, y, font, color, scale, ishighlight)
	if ishighlight then 
		_drawMenuSpriteHighLight(y ,buttonHeight, 0, 0.0, 255)
	end 
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    SetTextDropShadow(2, 2, 0, 0, 0)
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x + buttonTextXOffset, y)
end
local function _drawMenuText_Right(text, x, y, font, color, scale)
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    SetTextWrap(basicx, basicx + menuWidth - buttonTextXOffset)
    SetTextRightJustify(true)
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x, y)
end
local function _drawTextCenter(text, x, y, font, color, scale, shadow, alignRight)
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    if shadow then
        SetTextDropShadow(2, 2, 0, 0, 0)
    end
    SetTextCentre(center)
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x, y)
end
local function _drawMenuTextArray(text, x, y, font, color, scale,showArrow)
	SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
	local offsetx = 0.016
	BeginTextCommandGetWidth("STRING")
	AddTextComponentSubstringPlayerName(text)
	local width = EndTextCommandGetWidth(true)
	if showArrow then 
		local iconRight = "arrowright"
		local iconLeft = "arrowleft"
		local height = 0.032 
		DrawSprite("CommonMenu", iconLeft ,x + menuWidth - width - (buttonTextXOffset * 4),y + height / 2, height/GetAspectRatio(), height,0, GetHudColour(color))
		BeginTextCommandDisplayText("STRING")
		AddTextComponentSubstringPlayerName(text)
		EndTextCommandDisplayText(x + menuWidth - width - (buttonTextXOffset * 3), y)
		DrawSprite("CommonMenu", iconRight ,x + menuWidth - (buttonTextXOffset * 2),y + height / 2, height/GetAspectRatio(), height,0, GetHudColour(color))
	else 
		BeginTextCommandDisplayText("STRING")
		AddTextComponentSubstringPlayerName(text)
		EndTextCommandDisplayText(x + menuWidth - width - (buttonTextXOffset * 3), y)
	end 
end 
local function _drawMenuIcon_Right(y,iconName)
	if iconName then 
		DrawSprite("CommonMenu", iconName ,basicx + menuWidth - (buttonTextXOffset * 4),y + buttonHeight / 2, buttonHeight/GetAspectRatio(), buttonHeight,0, GetHudColour(color))
	end 
end 
local _drawButton = function(y,text,righttext,optionselected,icon,ishighlight)
	if ishighlight then 
		_drawMenuText(text,basicx,y,buttonFont,2,buttonScale, true)
		if righttext and icon then 
			_drawMenuTextArray(righttext[optionselected],basicx - buttonTextXOffset*4,y,buttonFont,2,buttonScale,#righttext > 1 and true or false)
			_drawMenuIcon_Right(y,icon)
		else 
			if righttext then 
				_drawMenuTextArray(righttext[optionselected],basicx,y,buttonFont,2,buttonScale,#righttext > 1 and true or false)
			end 
			if icon then 
				_drawMenuIcon_Right(y,icon)
			end 
		end 
	else 
		_drawMenuText(text,basicx,y,buttonFont,0,buttonScale, false)
		if righttext and icon then 
			_drawMenuTextArray(righttext[optionselected],basicx - buttonTextXOffset*4,y,buttonFont,0,buttonScale,#righttext > 1 and true or false)
			_drawMenuIcon_Right(y,icon)
		else 
			if righttext then 
				_drawMenuTextArray(righttext[optionselected],basicx,y,buttonFont,0,buttonScale,#righttext > 1 and true or false)
			end 
			if icon then 
				_drawMenuIcon_Right(y,icon)
			end 
		end 
	end 
end 
local _initMenuScroll = function()
	DrawSprite("CommonMenu", "shop_arrows_upANDdown", basicdrawingx, _drawMenuRect(buttonHeight, 140, 0.002, 220) - buttonHeight / 2, 0.032, buttonHeight, 0, GetHudColour(0));
end 
local _setMenuDescription = function(desc)
	if desc then 
		_drawMenuRect(0.0015, 2, 0.0020, 255)
		_drawMenuText(desc,basicx,_drawMenuSprite("Gradient_Bgd", buttonHeight, 0, 0.0, 255)-buttonHeight + 0.0025,buttonFont,0,buttonScale)
	end 
end 
Tasksync._MenuDrawSpecial = {}
Tasksync._MenuDrawButtons = {}
Tasksync._MenuDrawButtonDescriptions = {}
Tasksync._MenuDrawButtonIcons = {}
Tasksync._MenuDrawButtonOptions = {}
Tasksync._MenuDrawMenuSlotValue = {}
Tasksync._MenuDrawSelection = {y=1,x=1}
Tasksync.MenuDrawSetButtons = function(menugroup,...)
	if not Tasksync._MenuDrawButtons[menugroup] then Tasksync._MenuDrawButtons[menugroup] = {} end 
	Tasksync._MenuDrawButtons[menugroup] = {...}
end 
Tasksync.MenuDrawGetButtons = function(menugroup)
	return Tasksync._MenuDrawButtons[menugroup] or {}
end 
Tasksync.MenuDrawSetButtonDescription = function(menugroup,slot,description)
	if not Tasksync._MenuDrawButtonDescriptions[menugroup] then Tasksync._MenuDrawButtonDescriptions[menugroup] = {} end 
	Tasksync._MenuDrawButtonDescriptions[menugroup][slot] = description
end 
Tasksync.MenuDrawSetButtonOptions = function(menugroup,slot,...)
	if not Tasksync._MenuDrawButtonOptions[menugroup] then Tasksync._MenuDrawButtonOptions[menugroup] = {} end 
	Tasksync._MenuDrawButtonOptions[menugroup][slot] = {...}
	if not Tasksync._MenuDrawMenuSlotValue[menugroup] then Tasksync._MenuDrawMenuSlotValue[menugroup] = {} 
		Tasksync._MenuDrawMenuSlotValue[menugroup][slot] = 1
	end 
end 
Tasksync.MenuDrawGetButtonOptions = function(menugroup,slot)
	local bdo = Tasksync._MenuDrawButtonOptions[menugroup]
	local bdov = Tasksync._MenuDrawMenuSlotValue[menugroup]
	return bdo and bdo[slot],bdov and bdov[slot] or 1
end 
Tasksync.MenuDrawGetButtonDescription = function(menugroup,slot)
	local bds = Tasksync._MenuDrawButtonDescriptions[menugroup]
	return bds and bds[slot]
end 
Tasksync.MenuDrawSetButtonIcon = function(menugroup,slot,iconName)
	if not Tasksync._MenuDrawButtonIcons[menugroup] then Tasksync._MenuDrawButtonIcons[menugroup] = {} end 
	Tasksync._MenuDrawButtonIcons[menugroup][slot] = iconName
end 
Tasksync.MenuDrawGetButtonIcon = function(menugroup,slot)
	local bdicon = Tasksync._MenuDrawButtonIcons[menugroup]
	return bdicon and bdicon[slot]
end 
Tasksync.MenuDrawSetSlotValue = function(menugroup,slot,value)
	if not Tasksync._MenuDrawMenuSlotValue[menugroup] then Tasksync._MenuDrawMenuSlotValue[menugroup] = {} end 
	Tasksync._MenuDrawMenuSlotValue[menugroup][slot] = value 
end 
Tasksync.MenuDrawSetSelection = function(menugroup,y,x)
	local buttons = Tasksync.MenuDrawGetButtons(menugroup)
	if not x then x = 1 end  
	if not y then y = 1 end 
	if buttons and #buttons >= 1 then  
		if y <= 0 then 
			y = (y-1)%#buttons+1
		elseif y > #buttons then 
			y = y%#buttons
			if y <= 0 then 
				y = (y-1)%#buttons+1
			end 
		end 
	end 
	local options = Tasksync.MenuDrawGetButtonOptions(menugroup,y)
	if options then 
		if options and #options >= 1 then 
			if x <= 0 then 
				x = (x-1)%#options+1
			elseif x > #options then 
				x = x%#options
				if x <= 0 then 
					x = (x-1)%#options+1
				end 
			end 
		end 
		Tasksync.MenuDrawSetSlotValue(menugroup,y,x)
	else 
		x = 1 
	end 
	Tasksync._MenuDrawSelection[menugroup] = {y=y,x=x}
end 
Tasksync.MenuDrawGetSelection = function(menugroup,needx)
	return needx and Tasksync._MenuDrawSelection[menugroup] or Tasksync._MenuDrawSelection[menugroup].y
end 
Tasksync.MenuDrawEnd = function(menugroup)
	
	if Tasksync._CurrentMenuGroups and #Tasksync._CurrentMenuGroups > 0 then 
		for i,v in pairs(Tasksync._CurrentMenuGroups) do 
			if v == menugroup then 
				table.remove(Tasksync._CurrentMenuGroups,i)
				if #Tasksync._CurrentMenuGroups == 0 then 
					if Tasksync._MenuDrawSpecial["PI"] and Tasksync.ScaleformEnd then 
						Tasksync.ScaleformEnd("MP_MENU_GLARE")
						Tasksync._MenuDrawSpecial["PI"] = false 
					end 
					Tasksync.deletelooponce("tasksync_drawmenu")
				end 
			end 
		end 
	end 
	
end 
Tasksync.MenuEnd = Tasksync.MenuDrawEnd
Tasksync.MenuCheckType = function(menutype)
	local menutype = menutype or "default"
	
	if menutype == "PI" or menutype == "PersonalInteraction" then 
		if not Tasksync._MenuDrawSpecial["PI"] then 
			Tasksync._MenuDrawSpecial["PI"] = true 
			
			CreateThread(function()
				load(LoadResourceFile("tasksync", 'tasksync_with_scaleform.lua.sourcecode'))()
				Tasksync.ScaleformDrawMini("MP_MENU_GLARE",0.5,0.5,1.0,1.0,255,255,255,255,0,function(initialise)
					initialise("SET_DATA_SLOT",0.5,true)
					
				end,5)
				
			end)
		end 
	end 
end 
Tasksync._CurrentMenuGroups = {}
Tasksync.MenuDrawRender = function(menugroup,title,subtitle,maxslot,menutype)
	local maxslot = maxslot or 7
	Tasksync.MenuCheckType(menutype)
	RequestStreamedTextureDict( "commonmenu" )
	while not HasStreamedTextureDictLoaded("commonmenu") do Wait(0) end
	Tasksync.MenuDrawSetSelection(menugroup,1)
	local found 
	for i,v in pairs(Tasksync._CurrentMenuGroups) do 
			if v == menugroup then
				found = true 
			end 
	end 
	if not found then 
		table.insert(Tasksync._CurrentMenuGroups,menugroup)
	end 
	Tasksync.addlooponce("tasksync_drawmenu",0,function()
		
		local menugroup = Tasksync._CurrentMenuGroups[#Tasksync._CurrentMenuGroups]
		SetScriptGfxDrawOrder(0)
		SetScriptGfxAlign(76, 84);
		SetScriptGfxAlignParams(-0.05 + 0.0, -0.05 + 0.0, 0 + 0.0, 0 + 0.0);
		_ResetRects(basicy)
		--_drawMenuRect(titleHeight, 178)
		_drawMenuSprite("interaction_bgd",titleHeight, 0, 0.0, 255)
		local subtitley = _drawMenuRect(buttonHeight, 140, 0.0, 220)
		_drawMenuTextShadow(title, basicx, basicy + 0.03 , basicfont,0, 0.5)
		_drawMenuText(subtitle, basicx, basicbuttony, buttonFont, 9, buttonScale)
		local bts = Tasksync.MenuDrawGetButtons(menugroup)
		local btsT = #bts
		if btsT > 0 then 
			if (btsT > maxslot) then 
				_drawMenuText_Right(Tasksync.MenuDrawGetSelection(menugroup,false) .. ' / '..btsT, basicx + menuWidth, basicbuttony, buttonFont, 9, buttonScale) 
				_drawMenuSprite("Gradient_Bgd", buttonHeight * maxslot, 0, 0.0, 255)
			else 
				_drawMenuSprite("Gradient_Bgd", buttonHeight * btsT, 0, 0.0, 255)
			end 
			local selection = Tasksync.MenuDrawGetSelection(menugroup,false)
			if btsT > maxslot and selection > maxslot then 
				local n = 0
				for i=selection-(maxslot-1),selection,1 do 
					n = n + 1
					local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
					local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
					_drawButton(basicbuttony + buttonHeight * n,bts[i],righttextarray,optionselection,icon,selection == i)
				end 
			else 
				local n = 0
				for i=1,maxslot do  
					n = n + 1
					local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
					local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
					_drawButton(basicbuttony + buttonHeight * n,bts[i],righttextarray,optionselection,icon,selection == i)
				end 
			end 
			if btsT > maxslot then 
				_initMenuScroll()
			end 
			_setMenuDescription(Tasksync.MenuDrawGetButtonDescription(menugroup,Tasksync.MenuDrawGetSelection(menugroup,false)))
		end 
		ResetScriptGfxAlign();
	end)
end 

end 