load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
if not Tasksync._tasksync_with_drawmenu then 
Tasksync._tasksync_with_drawmenu = true 
local HexToRGBA = function (hex,skipkeys)
	local r = hex >> 24
	local offset = hex - (r << 24)
	local g = offset >> 16
	local offset = offset - (g << 16)
	local b = offset >> 8
	local offset = offset - (b << 8)
	local a = offset
	return (not skipkeys and {r=r,g=g,b=b,a=a}) or {r,g,b,a};
end 
local menuWidth = 0.258
local titleHeight = 0.091
local buttonHeight = 0.038
local buttonRectHeight = 0
local buttonFont = 0
local buttonScale = 0.365
local buttonTextXOffset = 0.005
local buttonTextYOffset = 0.005
local basicx = 0.0525
local basicdrawingx = basicx + menuWidth / 2
local basicy = 0.085
local basicbuttony = basicy + titleHeight + buttonTextYOffset
local basicfont = 0
local buttonTransparent = 140
local lastY
local function drawMenuText(text, x, y, font, color, scale, shadow)
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    if shadow then
        SetTextDropShadow(2, 2, 0, 0, 0)
    end
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x + buttonTextXOffset, y)
end
local function drawMenuText_Right(text, x, y, font, color, scale)
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    SetTextWrap(basicx, basicx + menuWidth - buttonTextXOffset)
    SetTextRightJustify(true)
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x, y)
end
local function drawTextCenter(text, x, y, font, color, scale, shadow, alignRight)
    SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
    if shadow then
        SetTextDropShadow(2, 2, 0, 0, 0)
    end
    SetTextCentre(center)
    BeginTextCommandDisplayText("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayText(x, y)
end
local function ResetRects(y)
	lastY = y
end 
local function drawMenuRect(height, color, offsetY, alpha)
	local y = lastY + (offsetY or 0.0)
	local r,g,b,a = GetHudColour(color)
    DrawRect(basicdrawingx, y + height / 2, menuWidth, height, r, g, b, (alpha or a))
	lastY = y + height 
	return lastY
end
local function drawMenuSprite(sprite, height, color, offsetY, alpha)
	local y = lastY + (offsetY or 0.0)
	local r,g,b,a = GetHudColour(color)
    DrawSprite("CommonMenu", sprite ,basicdrawingx,y + height / 2,menuWidth, height,0, r, g, b, (alpha or a))
	lastY = y + height 
	return lastY
end
local function drawMenuRectHighLight(y, height, color, offsetY, alpha)
	local r,g,b,a = GetHudColour(color)
	DrawRect(basicdrawingx, y + height / 2, menuWidth, height, r, g, b, (alpha or a))
end
local function drawMenuSpriteHighLight(y, height, color, offsetY, alpha)
	local r,g,b,a = GetHudColour(color)
	DrawSprite("CommonMenu", "Gradient_Nav",basicdrawingx,y + height / 2,menuWidth,height,0, r,g,b,(alpha or a))
end
Tasksync.Special = {}
Tasksync.Buttons = {}
Tasksync.ButtonDescriptions = {}
Tasksync.ButtonIcons = {}
Tasksync.ButtonOptions = {}
Tasksync.MenuSlotValue = {}
Tasksync.Selection = {y=1,x=1}
Tasksync.MenuDrawSetButtons = function(menugroup,...)
	if not Tasksync.Buttons[menugroup] then Tasksync.Buttons[menugroup] = {} end 
	Tasksync.Buttons[menugroup] = {...}
end 
Tasksync.MenuDrawGetButtons = function(menugroup)
	return Tasksync.Buttons[menugroup] or {}
end 
Tasksync.MenuDrawSetButtonDescription = function(menugroup,slot,description)
	if not Tasksync.ButtonDescriptions[menugroup] then Tasksync.ButtonDescriptions[menugroup] = {} end 
	Tasksync.ButtonDescriptions[menugroup][slot] = description
end 
Tasksync.MenuDrawSetButtonOptions = function(menugroup,slot,...)
	if not Tasksync.ButtonOptions[menugroup] then Tasksync.ButtonOptions[menugroup] = {} end 
	Tasksync.ButtonOptions[menugroup][slot] = {...}
	if not Tasksync.MenuSlotValue[menugroup] then Tasksync.MenuSlotValue[menugroup] = {} 
		Tasksync.MenuSlotValue[menugroup][slot] = 1
	end 
end 
Tasksync.MenuDrawGetButtonOptions = function(menugroup,slot)
	local bdo = Tasksync.ButtonOptions[menugroup]
	local bdov = Tasksync.MenuSlotValue[menugroup]
	return bdo and bdo[slot],bdov and bdov[slot] or 1
end 
Tasksync.MenuDrawGetButtonDescription = function(menugroup,slot)
	local bds = Tasksync.ButtonDescriptions[menugroup]
	return bds and bds[slot]
end 
Tasksync.MenuDrawSetButtonIcon = function(menugroup,slot,iconName)
	if not Tasksync.ButtonIcons[menugroup] then Tasksync.ButtonIcons[menugroup] = {} end 
	Tasksync.ButtonIcons[menugroup][slot] = iconName
end 
Tasksync.MenuDrawGetButtonIcon = function(menugroup,slot)
	local bdicon = Tasksync.ButtonIcons[menugroup]
	return bdicon and bdicon[slot]
end 
Tasksync.MenuDrawSetSelection = function(menugroup,y,x)
	local buttons = Tasksync.MenuDrawGetButtons(menugroup)
	if not x then x = 1 end  
	if not y then y = 1 end 
	if buttons and #buttons >= 1 then  
		if y <= 0 then 
			y = (y-1)%#buttons+1
		elseif y > #buttons then 
			y = y%#buttons
			if y <= 0 then 
				y = (y-1)%#buttons+1
			end 
		end 
	end 
	local options = Tasksync.MenuDrawGetButtonOptions(menugroup,y)
	if options then 
		if not Tasksync.MenuSlotValue[menugroup] then Tasksync.MenuSlotValue[menugroup] = {} end 
		if options and #options >= 1 then 
			if x <= 0 then 
				x = (x-1)%#options+1
			elseif x > #options then 
				x = x%#options
				if x <= 0 then 
					x = (x-1)%#options+1
				end 
			end 
		end 
		Tasksync.MenuSlotValue[menugroup][y] = x
	else 
		x = 1 
	end 
	Tasksync.Selection[menugroup] = {y=y,x=x}
end 
Tasksync.MenuDrawGetSelection = function(menugroup,needx)
	return needx and Tasksync.Selection[menugroup] or Tasksync.Selection[menugroup].y
end 
Tasksync.MenuDrawEnd = function(menugroup)
	if Tasksync.Special["PI"] and Tasksync.ScaleformEnd then 
		Tasksync.ScaleformEnd("MP_MENU_GLARE")
	end 
	Tasksync.deleteloop("drawmenu:"..menugroup)
end 
Tasksync.MenuEnd = Tasksync.MenuDrawEnd
Tasksync.MenuCheckType = function(menutype)
	local menutype = menutype or "default"
	if menutype == "PI" or menutype == "PersonalInteraction" then 
		if not Tasksync.Special["PI"] then 
			Tasksync.Special["PI"] = true 
			CreateThread(function()
				load(LoadResourceFile("tasksync", 'tasksync_with_scaleform.lua.sourcecode'))()
				Tasksync.ScaleformDrawMini("MP_MENU_GLARE",0.5,0.5,1.0,1.0,255,255,255,255,0,function(initialise)
					initialise("SET_DATA_SLOT",0.5,true)
				end,5)
			end)
		end 
	end 
end 
local function drawMenuTextArray(text, x, y, font, color, scale,showArrow)
	SetTextColour(GetHudColour(color))
    SetTextFont(font)
    SetTextScale(scale, scale)
	local offsetx = 0.016
	BeginTextCommandGetWidth("STRING")
	AddTextComponentSubstringPlayerName(text)
	local width = EndTextCommandGetWidth(true)
	if showArrow then 
		local iconRight = "arrowright"
		local iconLeft = "arrowleft"
		local height = 0.032 
		DrawSprite("CommonMenu", iconLeft ,x + menuWidth - width - (buttonTextXOffset * 4),y + height / 2, height/GetAspectRatio(), height,0, GetHudColour(color))
		BeginTextCommandDisplayText("STRING")
		AddTextComponentSubstringPlayerName(text)
		EndTextCommandDisplayText(x + menuWidth - width - (buttonTextXOffset * 3), y)
		DrawSprite("CommonMenu", iconRight ,x + menuWidth - (buttonTextXOffset * 2),y + height / 2, height/GetAspectRatio(), height,0, GetHudColour(color))
	else 
		BeginTextCommandDisplayText("STRING")
		AddTextComponentSubstringPlayerName(text)
		EndTextCommandDisplayText(x + menuWidth - width - (buttonTextXOffset * 3), y)
	end 
end 
local function drawMenuIcon_Right(y,iconName)
	if iconName then 
		DrawSprite("CommonMenu", iconName ,basicx + menuWidth - (buttonTextXOffset * 4),y + buttonHeight / 2, buttonHeight/GetAspectRatio(), buttonHeight,0, GetHudColour(color))
	end 
end 
Tasksync.MenuDrawInit = function(menugroup,title,subtitle,maxslot,menutype)
	local maxslot = maxslot or 7
	Tasksync.MenuCheckType(menutype)
	RequestStreamedTextureDict( "commonmenu" )
	while not HasStreamedTextureDictLoaded("commonmenu") do Wait(0) end
	Tasksync.MenuDrawSetSelection(menugroup,1)
	Tasksync.addloop("drawmenu:"..menugroup,0,function()
		SetScriptGfxDrawOrder(0)
		SetScriptGfxAlign(76, 84);
		SetScriptGfxAlignParams(-0.05 + 0.0, -0.05 + 0.0, 0 + 0.0, 0 + 0.0);
		ResetRects(basicy)
		--drawMenuRect(titleHeight, 178)
		drawMenuSprite("interaction_bgd",titleHeight, 0, 0.0, 255)
		local subtitley = drawMenuRect(buttonHeight, 140, 0.0, 220)
		drawMenuText(title, basicx, basicy + 0.03 , basicfont,0, 0.5, true)
		drawMenuText(subtitle, basicx, basicbuttony, buttonFont, 9, buttonScale)
		local bts = Tasksync.MenuDrawGetButtons(menugroup)
		local btsT = #bts
		if btsT > 0 then 
			if (btsT > maxslot) then 
				drawMenuText_Right(Tasksync.MenuDrawGetSelection(menugroup,false) .. ' / '..btsT, basicx + menuWidth, basicbuttony, buttonFont, 9, buttonScale) 
				drawMenuSprite("Gradient_Bgd", buttonHeight * maxslot, 0, 0.0, 255)
			else 
				drawMenuSprite("Gradient_Bgd", buttonHeight * btsT, 0, 0.0, 255)
			end 
			local selection = Tasksync.MenuDrawGetSelection(menugroup,false)
			if btsT > maxslot and selection > maxslot then 
				local n = 0
				for i=selection-(maxslot-1),selection,1 do 
					n = n + 1
					if selection == i then 
						drawMenuSpriteHighLight(basicbuttony + buttonHeight * n ,buttonHeight, 0, 0.0, 255)
						drawMenuText(bts[i],basicx,basicbuttony + buttonHeight * n,buttonFont,2,buttonScale)
						local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
						local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
						if righttextarray and icon then 
							drawMenuTextArray(righttextarray[optionselection],basicx - buttonTextXOffset*4,basicbuttony + buttonHeight * n,buttonFont,2,buttonScale,#righttextarray > 1 and true or false)
							drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
						else 
							if righttextarray then 
								drawMenuTextArray(righttextarray[optionselection],basicx,basicbuttony + buttonHeight * n,buttonFont,2,buttonScale,#righttextarray > 1 and true or false)
							end 
							if icon then 
								drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
							end 
						end 
					else 
						drawMenuText(bts[i],basicx,basicbuttony + buttonHeight * n,buttonFont,0,buttonScale)
						local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
						local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
						if righttextarray and icon then 
							drawMenuTextArray(righttextarray[optionselection],basicx - buttonTextXOffset*4,basicbuttony + buttonHeight * n,buttonFont,0,buttonScale,#righttextarray > 1 and true or false)
							drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)	
						else 
							if righttextarray then 
								drawMenuTextArray(righttextarray[optionselection],basicx,basicbuttony + buttonHeight * n,buttonFont,0,buttonScale,#righttextarray > 1 and true or false)
							end 
							if icon then 
								drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
							end 
						end 
					end 
				end 
			else 
				local n = 0
				for i=1,maxslot do  
					n = n + 1
					if selection == i then 
						drawMenuSpriteHighLight(basicbuttony + buttonHeight * n ,buttonHeight, 0, 0.0, 255)
						drawMenuText(bts[i],basicx,basicbuttony + buttonHeight * n,buttonFont,2,buttonScale)
						local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
						local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
						if righttextarray and icon then 
							drawMenuTextArray(righttextarray[optionselection],basicx - buttonTextXOffset*4,basicbuttony + buttonHeight * n,buttonFont,2,buttonScale,#righttextarray > 1 and true or false)
							drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
						else 
							if righttextarray then 
								drawMenuTextArray(righttextarray[optionselection],basicx,basicbuttony + buttonHeight * n,buttonFont,2,buttonScale,#righttextarray > 1 and true or false)
							end 
							if icon then 
								drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
							end 
						end 
					else 
						drawMenuText(bts[i],basicx,basicbuttony + buttonHeight * n,buttonFont,0,buttonScale)
						local righttextarray,optionselection = Tasksync.MenuDrawGetButtonOptions(menugroup,i)
						local icon = Tasksync.MenuDrawGetButtonIcon(menugroup,i)
						if righttextarray and icon then 
							drawMenuTextArray(righttextarray[optionselection],basicx - buttonTextXOffset*4,basicbuttony + buttonHeight * n,buttonFont,0,buttonScale,#righttextarray > 1 and true or false)
							drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
						else 
							if righttextarray then 
								drawMenuTextArray(righttextarray[optionselection],basicx,basicbuttony + buttonHeight * n,buttonFont,0,buttonScale,#righttextarray > 1 and true or false)
							end 
							if icon then 
								drawMenuIcon_Right(basicbuttony + buttonHeight * n,icon)
							end 
						end 
					end 
				end 
			end 
			if btsT > maxslot then 
				drawMenuRect(buttonHeight, 140, 0.002, 220)
				DrawSprite("CommonMenu", "shop_arrows_upANDdown", basicdrawingx, lastY - buttonHeight / 2, 0.032, buttonHeight, 0, GetHudColour(0));
			end 
			local desc = Tasksync.MenuDrawGetButtonDescription(menugroup,Tasksync.MenuDrawGetSelection(menugroup,false))
			if desc then 
				drawMenuRect(0.0015, 2, 0.0020, 255)
				local y = drawMenuSprite("Gradient_Bgd", buttonHeight, 0, 0.0, 255)
				--y = drawMenuRect(buttonHeight, 140, 0.005, 160)
				drawMenuText(desc,basicx,y-buttonHeight + 0.0025,buttonFont,0,buttonScale)
			end 
		end 
		ResetScriptGfxAlign();
	end)
end 
local switch = setmetatable({},{__call=function(a,b)_G.case=setmetatable({},{__call=function(a,...)return a[{...}]end,__index=function(a,c)local d=false;if c and type(c)=="table"then for e=1,#c do local f=c[e]if f and b and f==b then d=true;break end end end;if d then return setmetatable({},{__call=function(a,g)_G.default=setmetatable({},{__call=function(a,h)end})g()end})else return function()end end end})_G.default=setmetatable({},{__call=function(a,b)if b and type(b)=="function"then b()end end})return a[b]end,__index=function(a,f)return setmetatable({},{__call=function(a,...)end})end})
Tasksync.MenuDrawGetIcon = function(icontype, ed) --max:61 dont use it in loop/draws
	local icons = {}
	switch (icontype)(
		case(3)(function()
			icons[0] = "MP_hostCrown";
			icons[1] = "MP_hostCrown";
		end),
		case(21)(function()
			icons[0] = "MP_SpecItem_Coke";
			icons[1] = "MP_SpecItem_Coke";
		end),
		case(22)(function()
			icons[0] = "MP_SpecItem_Heroin";
			icons[1] = "MP_SpecItem_Heroin";
		end),
		case(23)(function()
			icons[0] = "MP_SpecItem_Weed";
			icons[1] = "MP_SpecItem_Weed";
		end),
		case(24)(function()
			icons[0] = "MP_SpecItem_Meth";
			icons[1] = "MP_SpecItem_Meth";
		end),
		case(25)(function()
			icons[0] = "MP_SpecItem_Cash";
			icons[1] = "MP_SpecItem_Cash";
		end),
		case(1)(function()
			icons[0] = "shop_NEW_Star";
			icons[1] = "shop_NEW_Star";
		end),
		case(2)(function()
			icons[0] = "shop_NEW_Star";
			icons[1] = "shop_NEW_Star";
		end),
		case(4)(function()
			icons[0] = "Shop_Tick_Icon";
			icons[1] = "Shop_Tick_Icon";
		end),
		case(6)(function()
			icons[0] = "Shop_Box_CrossB";
			icons[1] = "Shop_Box_Cross";
		end),
		case(7)(function()
			icons[0] = "Shop_Box_BlankB";
			icons[1] = "Shop_Box_Blank";
		end),
		case(5)(function()
			icons[0] = "Shop_Box_TickB";
			icons[1] = "Shop_Box_Tick";
		end),
		case(8)(function()
			icons[0] = "shop_NEW_Star";
			icons[1] = "shop_NEW_Star";
		end),
		case(9)(function()
			icons[0] = "Shop_Clothing_Icon_B";
			icons[1] = "Shop_Clothing_Icon_A";
		end),
		case(10)(function()
			icons[0] = "Shop_GunClub_Icon_B";
			icons[1] = "Shop_GunClub_Icon_A";
		end),
		case(17)(function()
			icons[0] = "Shop_Ammo_Icon_B";
			icons[1] = "Shop_Ammo_Icon_A";
		end),
		case(18)(function()
			icons[0] = "Shop_Armour_Icon_B";
			icons[1] = "Shop_Armour_Icon_A";
		end),
		case(19)(function()
			icons[0] = "Shop_Health_Icon_B";
			icons[1] = "Shop_Health_Icon_A";
		end),
		case(20)(function()
			icons[0] = "Shop_MakeUp_Icon_B";
			icons[1] = "Shop_MakeUp_Icon_A";
		end),
		case(11)(function()
			icons[0] = "Shop_Tattoos_Icon_B";
			icons[1] = "Shop_Tattoos_Icon_A";
		end),
		case(12)(function()
			icons[0] = "Shop_Garage_Icon_B";
			icons[1] = "Shop_Garage_Icon_A";
		end),
		case(13)(function()
			icons[0] = "Shop_Garage_Bike_Icon_B";
			icons[1] = "Shop_Garage_Bike_Icon_A";
		end),
		case(14)(function()
			icons[0] = "Shop_Barber_Icon_B";
			icons[1] = "Shop_Barber_Icon_A";
		end),
		case(15)(function()
			icons[0] = "shop_Lock";
			icons[1] = "shop_Lock";
		end),
		case(16)(function()
			icons[0] = "Shop_Tick_Icon";
			icons[1] = "Shop_Tick_Icon";
		end),
		case(26)(function()
			icons[0] = "arrowleft";
			icons[1] = "arrowleft";
		end),
		case(27)(function()
			icons[0] = "arrowright";
			icons[1] = "arrowright";
		end),
		case(28)(function()
			icons[0] = "MP_AlertTriangle";
			icons[1] = "MP_AlertTriangle";
		end),
		case(29)(function()
			icons[0] = "shop_NEW_Star";
			icons[1] = "shop_NEW_Star";
		end),
		case(31)(function()
			icons[0] = "Shop_Michael_Icon_B";
			icons[1] = "Shop_Michael_Icon_A";
		end),
		case(32)(function()
			icons[0] = "Shop_Franklin_Icon_B";
			icons[1] = "Shop_Franklin_Icon_A";
		end),
		case(33)(function()
			icons[0] = "Shop_Trevor_Icon_B";
			icons[1] = "Shop_Trevor_Icon_A";
		end),
		case(51)(function()
			icons[0] = "SaleIcon";
			icons[1] = "SaleIcon";
		end),
		case(52)(function()
			icons[0] = "Shop_Tick_Icon";
			icons[1] = "Shop_Tick_Icon";
		end),
		case(54)(function()
			icons[0] = "shop_NEW_Star";
			icons[1] = "shop_NEW_Star";
		end),
		case(55)(function()
			icons[0] = "Shop_Lock_Arena";
			icons[1] = "Shop_Lock_Arena";
		end),
		case(56)(function()
			icons[0] = "Card_Suit_Clubs";
			icons[1] = "Card_Suit_Clubs";
		end),
		case(57)(function()
			icons[0] = "Card_Suit_Hearts";
			icons[1] = "Card_Suit_Hearts";
		end),
		case(58)(function()
			icons[0] = "Card_Suit_Spades";
			icons[1] = "Card_Suit_Spades";
		end),
		case(59)(function()
			icons[0] = "Card_Suit_Diamonds";
			icons[1] = "Card_Suit_Diamonds";
		end),
		case(60)(function()
			icons[0] = "Shop_Art_Icon_B";
			icons[1] = "Shop_Art_Icon_A";
		end),
		case(62)(function()
			icons[0] = "Shop_Art_Icon_B";
			icons[1] = "Shop_Art_Icon_A";
		end),
		case(61)(function()
			icons[0] = "Shop_Chips_A";
			icons[1] = "Shop_Chips_B";
		end),
		case(0)(function()
			icons[0] = "";
			icons[1] = "";
		end)
	)
	if ed then
		return icons[0];
	end
	return icons[1];
end
end 