load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_keys then 
local upper = string.upper
Tasksync._initialized_tasksync_with_keys = true 
local IsStringNullOrEmpty = function(str) return (str == nil or str == "" or type(str)~='string') end 
Tasksync._GroupedKeyCallBacks = {}
Tasksync._KeyGroupEnable = {}
local returnGroupedKeyName = function(group,key)
	return upper(group .. "_" .. key)
end 
local _setGroupedKeyCallback = function(group,key,value)
	local _groupedkeyname = returnGroupedKeyName(group,key)
	local groupedkeycallback = _getGroupedKeyCallback(group,key)
	if groupedkeycallback then 
		Tasksync._GroupedKeyCallBacks[_groupedkeyname] = value
	end 
end 
local _getGroupedKeyCallback = function(group,key)
	local _groupedkeyname = returnGroupedKeyName(group,key)
	return Tasksync._GroupedKeyCallBacks and Tasksync._GroupedKeyCallBacks[_groupedkeyname]
end 

Tasksync._RegisterGroupedKeyCallback = function(group,key,cb)
	local _groupedkeyname = returnGroupedKeyName(group,key)
	if not Tasksync._GroupedKeyCallBacks[_groupedkeyname] then Tasksync._GroupedKeyCallBacks[_groupedkeyname] = {} end 
	table.insert(Tasksync._GroupedKeyCallBacks[_groupedkeyname] , cb )
end 
Tasksync._TriggerGroupedKeyCallback = function(group,key)
	local _groupedkeyname = returnGroupedKeyName(group,key)
	if Tasksync.IsKeyGroupActive(group) then 
		local groupedkeycallback = _getGroupedKeyCallback(group,key)
		if groupedkeycallback then 
			for i=1,#groupedkeycallback do 
				groupedkeycallback[i]()  
			end
		end 		
	end 
end 

Tasksync.RegisterGroupedKeyCallbackJustPressed = function(group,key,cb)
	return Tasksync._RegisterGroupedKeyCallback(group,key.."_JUST_PRESSED",cb)
end 
Tasksync.RegisterGroupedKeyCallbackPressed = function(group,key,cb)
	return Tasksync._RegisterGroupedKeyCallback(group,key.."_PRESSED",cb)
end 
Tasksync.RegisterGroupedKeyCallbackJustReleased = function(group,key,cb)
	return Tasksync._RegisterGroupedKeyCallback(group,key.."_JUST_RELEASED",cb)
end 
Tasksync.UnRegisterKeyEvent = function(group,key)
	_setGroupedKeyCallback(group,key,nil)
end 

Tasksync.SetKeyGroupActive = function(group,bool) 
	Tasksync._KeyGroupEnable[group] = bool 
end 

Tasksync.IsKeyGroupActive = function(group)
	return Tasksync._KeyGroupEnable[group]
end 
Tasksync.RemoveKeyGroup = function(group)
	Tasksync._KeyGroupEnable[group] = nil
end 
Tasksync.DeleteKeyGroup = Tasksync.RemoveKeyGroup
Tasksync.RegisterKeyGroup = function(key,group,description,type_) 
	local type_ = type_ or 'keyboard'
	local _groupedkeyname = returnGroupedKeyName(group,key)
	RegisterCommand("+".._groupedkeyname, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_PRESSED") 
	end, false) 
	RegisterCommand("-".._groupedkeyname, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_RELEASED") 
	end, false) 
	RegisterKeyMapping("+".._groupedkeyname, IsStringNullOrEmpty(description) and "+".._groupedkeyname or description , type_, key) 
end 
Tasksync.RegisterKeyGroupFull = function(key,group,description,presseddelay,delayperpressed,type_) 
	local type_ = type_ or 'keyboard'
	local _groupedkeyname = returnGroupedKeyName(group,key)
	RegisterCommand("+".._groupedkeyname, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_PRESSED")
		local delaytime = GetGameTimer() + (presseddelay or 500)
		Tasksync.addlooponce("KEY_LOOP:"..returnGroupedKeyName(group,key),delayperpressed or 300,function()
			if GetGameTimer() > delaytime then 
				Tasksync._TriggerGroupedKeyCallback(group,key.."_PRESSED")
			end 
		end)
	end, false) 
	RegisterCommand("-".._groupedkeyname, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_RELEASED") 
		Tasksync.deletelooponce("KEY_LOOP:"..returnGroupedKeyName(group,key))
	end, false) 
	RegisterKeyMapping("+".._groupedkeyname, IsStringNullOrEmpty(description) and "+".._groupedkeyname or description , type_, key) 
	 
end 
Tasksync.RegisterKeyTable = function(regtable)
	local group = regtable.group 
	local keys = regtable.keys 
	for i,v in pairs(keys) do 
		--[[
		if string.find(v[1],"IOM") or string.find(v[1],"MOUSE") then 
			print("It not suppose to be used because some mouse key can not be detected and glitched on apple magic mouse")
			print("I suggested using IsControlPressed on mouse")
		else 
			
		end --]]
		local isFullRegister = (v[3] and type(v[3]) == 'number')
		if isFullRegister then 
			Tasksync.RegisterKeyGroupFull(v[1],group,v[2],v[3],v[4],v[5])
		else 
			Tasksync.RegisterKeyGroup(v[1],group,v[2],v[3])
		end 
	end 
	local cbs = regtable.cbs 
	if cbs then 
		for i,v in pairs(cbs) do 
			local style = v[2]
			local action = {}
			action["JUST_PRESSED"] = Tasksync.RegisterGroupedKeyCallbackJustPressed
			action["PRESSED"] = Tasksync.RegisterGroupedKeyCallbackPressed
			action["JUST_RELEASED"] = Tasksync.RegisterGroupedKeyCallbackJustReleased
			if v[4] then 
				local _cb = function()
					local _atbl = {}
					for i=4,#v do 
						table.insert(_atbl,v[i])
					end 
					return v[3](table.unpack(_atbl))
				end 
				action[style](group,v[1],_cb)
			else 
				action[style](group,v[1],v[3])
			end
		end 
	end 
end 

end 