load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_keys then 
local upper = string.upper
Tasksync._initialized_tasksync_with_keys = true 
local IsStringNullOrEmpty = function(str) return (str == nil or str == "" or type(str)~='string') end 
Tasksync._GroupedKeyCallBacks = {}
Tasksync._KeyGroupEnable = {}
local returnGroupedKeyName = function(group,key)
	return upper(group .. "_" .. key)
end 
local _setGroupedKeyCallback = function(group,key,value)
	local name = returnGroupedKeyName(group,key)
	local groupedkeycallback = _getGroupedKeyCallback(group,key)
	if groupedkeycallback then 
		Tasksync._GroupedKeyCallBacks[name] = value
	end 
end 
local _getGroupedKeyCallback = function(group,key)
	local name = returnGroupedKeyName(group,key)
	return Tasksync._GroupedKeyCallBacks and Tasksync._GroupedKeyCallBacks[name]
end 

Tasksync._RegisterGroupedKeyCallback = function(group,key,cb)
	local name = returnGroupedKeyName(group,key)
	if not Tasksync._GroupedKeyCallBacks[name] then Tasksync._GroupedKeyCallBacks[name] = {} end 
	table.insert(Tasksync._GroupedKeyCallBacks[name] , cb )
end 
Tasksync._TriggerGroupedKeyCallback = function(group,key)
	local name = returnGroupedKeyName(group,key)
	if Tasksync.IsKeyGroupActive(group) then 
		local groupedkeycallback = _getGroupedKeyCallback(group,key)
		if groupedkeycallback then 
			for i=1,#groupedkeycallback do 
				groupedkeycallback[i]()  
			end
		end 		
	end 
end 

Tasksync.RegisterGroupedKeyCallbackJustPressed = function(group,key,cb)
	return Tasksync._RegisterGroupedKeyCallback(group,key.."_JUST_PRESSED",cb)
end 
Tasksync.RegisterGroupedKeyCallbackPressed = function(group,key,cb)
	return Tasksync._RegisterGroupedKeyCallback(group,key.."_PRESSED",cb)
end 
Tasksync.RegisterGroupedKeyCallbackJustReleased = function(group,key,cb)
	return Tasksync._RegisterGroupedKeyCallback(group,key.."_JUST_RELEASED",cb)
end 
Tasksync.UnRegisterKeyEvent = function(group,key)
	_setGroupedKeyCallback(group,key,nil)
end 

Tasksync.SetKeyGroupActive = function(group,bool) 
	Tasksync._KeyGroupEnable[group] = bool 
end 
Tasksync.IsKeyGroupActive = function(group)
	return Tasksync._KeyGroupEnable[group]
end 
Tasksync.RemoveKeyGroup = function(group)
	Tasksync._KeyGroupEnable[group] = nil
end 
Tasksync.DeleteKeyGroup = Tasksync.RemoveKeyGroup
Tasksync.RegisterKeyGroupKeyboard = function(key,group,description) 
	local name = returnGroupedKeyName(group,key)
	RegisterCommand("+"..name, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_PRESSED") 
	end, false) 
	RegisterCommand("-"..name, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_RELEASED") 
	end, false) 
	RegisterKeyMapping("+"..name, IsStringNullOrEmpty(description) and "+"..name or description , 'keyboard', key) 
end 
Tasksync.RegisterKeyGroupKeyboardFull = function(key,group,description,presseddelay,delayperpressed) 
	local name = returnGroupedKeyName(group,key)
	RegisterCommand("+"..name, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_PRESSED")
		local delaytime = GetGameTimer() + (presseddelay or 500)
		Tasksync.addlooponce("KEY_LOOP:"..returnGroupedKeyName(group,key),delayperpressed or 300,function()
			if GetGameTimer() > delaytime then 
				Tasksync._TriggerGroupedKeyCallback(group,key.."_PRESSED")
			end 
		end)
	end, false) 
	RegisterCommand("-"..name, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key.."_JUST_RELEASED") 
		Tasksync.deletelooponce("KEY_LOOP:"..returnGroupedKeyName(group,key))
	end, false) 
	RegisterKeyMapping("+"..name, IsStringNullOrEmpty(description) and "+"..name or description , 'keyboard', key) 
	 
end 
Tasksync.RegisterKeyTable = function(regtable)
	local group = regtable.group 
	local keys = regtable.keys 
	for i,v in pairs(keys) do 
		local full = false 
		if v[3] and type(v[3]) == 'number' then full = true end 
		if full then 
			Tasksync.RegisterKeyGroupKeyboardFull(v[1],group,v[2],v[3],v[4])
		else 
			Tasksync.RegisterKeyGroupKeyboard(v[1],group,v[2])
		end 
	end 
	local cbs = regtable.cbs 
	if cbs then 
		for i,v in pairs(cbs) do 
			local style = v[2]
			if style == "JUST_PRESSED" then 
				if v[4] then 
					local _cb = function()
						local _atbl = {}
						for i=4,#v do 
							table.insert(_atbl,v[i])
						end 
						return v[3](table.unpack(_atbl))
					end 
					Tasksync.RegisterGroupedKeyCallbackJustPressed(group,v[1],_cb)
				else 
					Tasksync.RegisterGroupedKeyCallbackJustPressed(group,v[1],v[3])
				end
			elseif style == "PRESSED" then
				if v[4] then 
					local _cb = function()
						local _atbl = {}
						for i=4,#v do 
							table.insert(_atbl,v[i])
						end 
						return v[3](table.unpack(_atbl))
					end 
					Tasksync.RegisterGroupedKeyCallbackPressed(group,v[1],_cb)
				else 
					Tasksync.RegisterGroupedKeyCallbackPressed(group,v[1],v[3])
				end
			elseif style == "JUST_RELEASED" then 
				if v[4] then 
					local _cb = function()
						local _atbl = {}
						for i=4,#v do 
							table.insert(_atbl,v[i])
						end 
						return v[3](table.unpack(_atbl))
					end 
					Tasksync.RegisterGroupedKeyCallbackJustReleased(group,v[1],_cb)
				else 
					Tasksync.RegisterGroupedKeyCallbackJustReleased(group,v[1],v[3])
				end
			end 
		end 
	end 
end 
Tasksync.RegisterMouseWheelCallback = function(key,group,description) 
	local name = returnGroupedKeyName(group,key)
	RegisterCommand(name, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key) 
	end, false) 
	RegisterKeyMapping(name, IsStringNullOrEmpty(description) and name or description , 'MOUSE_WHEEL', key) 
end 
Tasksync.RegisterMouseButtonCallback = function(key,group,description) 
	local name = returnGroupedKeyName(group,key)
	RegisterCommand(name, function() 
		Tasksync._TriggerGroupedKeyCallback(group,key) 
	end, false) 
	RegisterKeyMapping(name, IsStringNullOrEmpty(description) and name or description , 'MOUSE_BUTTONANY', key) 
end 
end 