load(LoadResourceFile("tasksync", 'tasksync.lua.sourcecode'))()
load(LoadResourceFile("tasksync", 'tasksync_once.lua.sourcecode'))()
if not Tasksync._initialized_tasksync_with_keys then 
Tasksync._initialized_tasksync_with_keys = true 
	do 
	local upper = string.upper
	local IsStringNullOrEmpty = function(str) return (str == nil or str == "" or type(str)~='string') end 
	local KeyGroupEnable = {}
	local GroupedKeys = {}
	local GroupedKeyCallBacks = {}
	local e = {}

	local _clearGroupedKeyCallback = function(group,key,style)
		if _getGroupedKeyCallback(group,key,style) then GroupedKeys[group][key][style] =  nil end 
	end 
	local _getGroupedKeyCallback = function(group,key,style,...)
		local t = (((GroupedKeys or e)[group] or e)[key] or e)[style]
		return t
	end 

	local registerGroupedKeyCallback = function(group,key,style,cb)
		if not GroupedKeys[group] then GroupedKeys[group] = {} end 
		if not GroupedKeys[group][key] then GroupedKeys[group][key] = {} end 
		GroupedKeys[group][key][style] = cb
	end 

	local triggerGroupedKeyCallback = function(group,key,style)
		if Tasksync.IsKeyGroupActive(group) then 
			local groupedkeycallback = _getGroupedKeyCallback(group,key,style)
			if groupedkeycallback then groupedkeycallback(group,key)  end 		
		end 
	end 

	Tasksync.RegisterGroupedKeyCallbackJustPressed = function(group,key,cb)
		return registerGroupedKeyCallback(group,key,"_JUST_PRESSED",cb)
	end 
	Tasksync.RegisterGroupedKeyCallbackPressed = function(group,key,cb)
		return registerGroupedKeyCallback(group,key,"_PRESSED",cb)
	end 
	Tasksync.RegisterGroupedKeyCallbackJustHolded = function(group,key,cb)
		return registerGroupedKeyCallback(group,key,"_JUST_HOLDED",cb)
	end 
	Tasksync.RegisterGroupedKeyCallbackJustReleased = function(group,key,cb)
		return registerGroupedKeyCallback(group,key,"_JUST_RELEASED",cb)
	end 
	Tasksync.UnRegisterKeyEventCallback = function(group,key,style)
		_clearGroupedKeyCallback(group,key,style)
	end 

	Tasksync.SetKeyGroupActive = function(group,bool) 
		KeyGroupEnable[group] = bool 
	end 

	Tasksync.IsKeyGroupActive = function(group)
		return not not KeyGroupEnable[group]
	end 
	Tasksync.RemoveKeyGroup = function(group)
		KeyGroupEnable[group] = nil
	end 
	Tasksync.DeleteKeyGroup = Tasksync.RemoveKeyGroup

	local returnGroupedKeyName = function(group,key)
		return upper(group .. "_" .. key)
	end 

	Tasksync.RegisterKeyGroup = function(key,group,description,type_) 
		local type_ = type_ or 'keyboard'
		local _groupedkeyname = returnGroupedKeyName(group,key)
		RegisterCommand("+".._groupedkeyname, function() 
			triggerGroupedKeyCallback(group,key,"_JUST_PRESSED") 
		end, false) 
		
		RegisterCommand("-".._groupedkeyname, function() 
			triggerGroupedKeyCallback(group,key,"_JUST_RELEASED") 
		end, false) 
		
		RegisterKeyMapping("+".._groupedkeyname, IsStringNullOrEmpty(description) and "+".._groupedkeyname or description , type_, key) 
	end 
	Tasksync.RegisterKeyGroupFull = function(key,group,description,presseddelay,delayperpressed,type_) 
		local type_ = type_ or 'keyboard'
		local _groupedkeyname = returnGroupedKeyName(group,key)
		RegisterCommand("+".._groupedkeyname, function() 
			triggerGroupedKeyCallback(group,key,"_JUST_PRESSED")
			
			local delaytime = GetGameTimer() + (presseddelay or 500)
			local _TriggerGroupedKeyCallback = triggerGroupedKeyCallback
			local loopduration = delayperpressed
			if delayperpressed == -1 then loopduration = 150 end 
			Tasksync.addlooponce("KEY_LOOP:"..returnGroupedKeyName(group,key),loopduration or 300,function()
				if GetGameTimer() > delaytime then 
					if delayperpressed == - 1 then 
						_TriggerGroupedKeyCallback(group,key,"_JUST_HOLDED")
						Tasksync.deletelooponce("KEY_LOOP:"..returnGroupedKeyName(group,key))
					else 
						_TriggerGroupedKeyCallback(group,key,"_PRESSED")
					end 
				end 
			end)
		end, false) 
		RegisterCommand("-".._groupedkeyname, function() 
			triggerGroupedKeyCallback(group,key,"_JUST_RELEASED") 
			Tasksync.deletelooponce("KEY_LOOP:"..returnGroupedKeyName(group,key))
		end, false) 
		RegisterKeyMapping("+".._groupedkeyname, IsStringNullOrEmpty(description) and "+".._groupedkeyname or description , type_, key) 
		 
	end 
	Tasksync.RegisterKeyTable = function(regtable)
		local group = regtable.group 
		local keys = regtable.keys 
		for i,v in pairs(keys) do 
			local isFullRegister = (v[3] and type(v[3]) == 'number')
			if isFullRegister then 
				Tasksync.RegisterKeyGroupFull(v[1],group,v[2],v[3],v[4],v[5])
			else 
				Tasksync.RegisterKeyGroup(v[1],group,v[2],v[3])
			end 
		end 
		local cbs = regtable.cbs 
		if cbs then 
			for i,v in pairs(cbs) do 
				local style = v[2]
				local action = {}
				action["JUST_PRESSED"] = Tasksync.RegisterGroupedKeyCallbackJustPressed
				action["PRESSED"] = Tasksync.RegisterGroupedKeyCallbackPressed
				action["JUST_HOLDED"] = Tasksync.RegisterGroupedKeyCallbackJustHolded
				action["JUST_RELEASED"] = Tasksync.RegisterGroupedKeyCallbackJustReleased
				if v[4] then 
					local _cb = function(group,key)
						local _atbl = {}
						for i=4,#v do 
							table.insert(_atbl,v[i])
						end 
						return v[3](table.unpack(_atbl))
					end 
					action[style](group,v[1],_cb)
				else 
					action[style](group,v[1],v[3])
				end
			end 
		end 
	end 
	end 
end 